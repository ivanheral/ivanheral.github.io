<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="ivanheral.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="ivanheral.github.io/" rel="alternate" type="text/html" /><updated>2022-06-14T21:30:13+02:00</updated><id>ivanheral.github.io/feed.xml</id><title type="html">Escribo cosas</title><subtitle>Blog sobre cine, linux, desarrollo y opiniones.</subtitle><entry><title type="html">Circulen, aquí no hay nada que ver.</title><link href="ivanheral.github.io/opinion/2020/11/05/despedida-del-blog.html" rel="alternate" type="text/html" title="Circulen, aquí no hay nada que ver." /><published>2020-11-05T21:00:00+01:00</published><updated>2020-11-05T21:00:00+01:00</updated><id>ivanheral.github.io/opinion/2020/11/05/despedida-del-blog</id><content type="html" xml:base="ivanheral.github.io/opinion/2020/11/05/despedida-del-blog.html"><![CDATA[<p>Bueno, chavales. Como era bien sabido por todos, este blog cierra por cese de actividad. Ha sido una etapa maravillosa, pero es hora de pasar página y dedicarme a mis labores: el bebercio, la contemplación, el ganchillo o lo que se tercie. La afluencia era escasa por estos lares y ahora con la pandemia más si cabe: aforo del 50% en terrazas, restricciones de movilidad… Una serie de medidas que han matado definitivamente este propicio negocio.</p>

<p>Pero no os preocupéis, dejando las bromas aparte, me voy satisfecho con el aprendizaje aplicado en este proyecto durante estos últimos años. Ha sido como el hijo que nunca he podido tener y que me ha hecho salvaguardarme de lo que acontecía a mi alrededor en todo este tiempo con sus ocurrencias. No es hora de estar tristes, las cosas van y vienen, de todo esto se aprende y algo positivo sacaré de todo esto (o eso creo).</p>

<p>Ahora se lleva lo de contonear el culo en tik tok o los podcasts donde la gente es experta de todo sin saber de nada para autopromocionarse. Lo de vomitar nuestras batallitas por escrito cual abuelito ya han pasado a mejor vida para dar paso al “aparentismo”. Por este motivo, he decidido bajarme del tren, dejar los bártulos y disfrutar del poco tiempo que dispongo actualmente. Ahora, pasaremos directamente a la lista de agradecimientos de las personas cercanas que han supuesto un pilar fundamental en mi vida:</p>

<p>A mis padres por aguantar mis rarezas y comprenderme en todas las decisiones de mierda que tomo constantemente en la vida. Se acaban de jubilar y con esto de la pandemia pues no han podido apuntarse a los viajes de inserso, están que se suben por las paredes.</p>

<p>A mi hermana por reprenderme por todos mis TOCs a cada cual más extraño y premiarme con comida cuando hago las cosas de manera correcta. Actualmente la enseño a programar porque en su instituto no quieren contratar profesores para evitar los contagios.</p>

<p>A mis amigos por despejarme la cabeza en los momentos difíciles, aunque nunca les cuente todo lo que me gustaría. Ahora están confinados y quedamos en terrazas respetando la limitación de 6 personas, en ese aspecto no tengo muchos problemas porque los puedo contar con los dedos de una mano.</p>

<p>A él resto, gente que me ha cancelado, me ha hecho mobbing laboral o me ha utilizado para pisarme a la mínima que han podido: muchas gracias, habéis sido una pieza fundamental en mi forma de pensar y entender la vida.</p>

<p>Finalmente, el Iván de 2016 tenía muchas ganas e ilusión por hacer cosas, sin embargo, se fue diluyendo con el paso del tiempo y ya no ha vuelto por aquí. Os habría encantado conocerle, era bastante más lucido que yo y tenía posts muy interesantes que aportar a la sociedad. Aunque era muy inocente y alguna que otra ostia se llevó por el camino.</p>

<p>Con el tiempo, se fue apagando hasta que el Iván de 2019 le puso un poco de empeño por reflotar el blog, pero pasaron cosas personales que lo echaron al traste retomar todo esto. Le cedimos el testigo al de 2020, pero no hay que ser muy inteligente para darse cuenta que no era el más avispado de las tres versiones de Iván ya comentadas anteriormente.</p>

<p>Así que el Iván de 2020 se quedó sin entretenimiento, encerrado en casa y sin la pieza fundamental que le motivo a realizar todo esto. Un caldo de cultivo interesante que derivó en una prometedora depresión que afrontó con la mejor de sus sonrisas. Ahora está viviendo la mejor etapa de vida: en el aspecto laboral, personal y sentimental. Pero se lo guarda para el (para darle un halo de misterio al asunto), ya no está por la labor de compartir sus alegrías con desconocidos.</p>

<p>No tengo muy claro que me depararan las siguientes versiones de mi en los próximos años. Igual me iré al campo a vivir o me compraré un piso en el centro, acabaré casándome o adoptando un bebé chino para desgravar a hacienda. Todo es posible después de este aciago año.</p>

<p>De todas formas, estas cosas no dependen de mí. Como ya sabéis, nos dirigimos a un nuevo orden mundial y del que ya se estaba rumiando en diferentes mentideros. Quien sabe, igual gente como nosotros podrá integrarse mejor en el nuevo mundo que al que nos dirigimos ahora.</p>

<p>Mi Padre siempre dice que toda nuestra vida está escrita y razón no le falta: no os esforcéis, no toméis decisiones porque ya otros los tomarán por vosotros ni deis pistas de lo que estáis tramando. En los próximos años, veremos cosas que harán cortocircuitar a la gente más cabal y no quiero estar presente cuando eso pase, he perdido a mucha gente por el camino como para estar a expensas de lo que hagan los demás. Se avecinan cambios geopolíticos muy interesantes, la gente pasará hambre y el capitalismo, tal y como lo conocemos, pasará a mejor vida para dar paso a la agenda 2030.</p>

<p>Pero no pasa nada, es probable que lo disfrute con una copa de vino en la mano mientras asomo por el balcón mientras veo el caos reinando a sus anchas por las calles aledañas. Antes de todo esto, era muy de preocuparme por los problemas de los demás, posiblemente el Iván del 2021 solo le preocupen los suyos, se ha vuelto egoísta y huraño. Vienen tiempos muy interesantes para los pesimistas.</p>

<p>Y este es un poco el resumen de lo que nos deparara el futuro, por este motivo no me queda más remedio que pasar a despedirme y desearos lo mejor. He cometido muchos errores, he sido gilipollas con gente que quería y me he dado cuenta de cosas que tenía que corregir demasiado tarde. No lloréis por mí. Circulen, aquí no hay nada que ver. Ha sido un placer.</p>]]></content><author><name>ivanheral</name></author><category term="opinion" /><summary type="html"><![CDATA[Bueno, chavales. Como era bien sabido por todos, este blog cierra por cese de actividad. Ha sido una etapa maravillosa, pero es hora de pasar página y dedicarme a mis labores: el bebercio, la contemplación, el ganchillo o lo que se tercie. La afluencia era escasa por estos lares y ahora con la pandemia más si cabe: aforo del 50% en terrazas, restricciones de movilidad… Una serie de medidas que han matado definitivamente este propicio negocio.]]></summary></entry><entry><title type="html">Mi relación con mi smartphone</title><link href="ivanheral.github.io/opinion/2019/09/18/relacion-con-mi-smartphone.html" rel="alternate" type="text/html" title="Mi relación con mi smartphone" /><published>2019-09-18T22:00:00+02:00</published><updated>2019-09-18T22:00:00+02:00</updated><id>ivanheral.github.io/opinion/2019/09/18/relacion-con-mi-smartphone</id><content type="html" xml:base="ivanheral.github.io/opinion/2019/09/18/relacion-con-mi-smartphone.html"><![CDATA[<p>Esta semana pasada no ha sido todo lo placentera que me hubiera gustado que fuera. Una serie de picores por todo el cuerpo me han obligado a acudir en reiteradas ocasiones al ambulatorio para saber el porqué de estos dolores que no me dejaban ni pegar ojo. Tras una revisión, detectaron el problema: una urticaria aguda difícil de tratar con medicamentos. No me quedo más remedio que acudir a urgencias para que me aplicaran un par de inyecciones en el trasero para mitigar los sarpullidos.</p>

<p>En esos pequeños instantes de lucidez, mientras estaba mirando boca abajo en la camilla con las nalgas al aire esperando al enfermo (bastante guapo, por cierto) comencé a reflexionar sobre la vida. Empecé a enumerar todas aquellas personas que siempre habían estado en mis peores momentos: mis padres, mi hermana o mis mejores amigos. Pero, sobre todo, me acorde de mi smartphone con el que llevo prácticamente 6 años y del que rara vez me separo.</p>

<p>Si, habéis oído bien, prácticamente más de medio lustro con él. Lo habitual es aguantar 2 años y renovarlos, pero lo mío fue un flechazo a primera vista. Venía de un motoluxe que a duras penas aguantaba un día entero. Pero llego la hora de jubilarlo y las operadoras comenzaban a cobrar por renovar los smartphones, ya no los regalaban por tu cara bonita. Es por ello que decidí pensar con detenimiento y un 14 de febrero - una fecha muy romántica - me compré un lg g2 en 2014 por casi 500 euros. Tenía otras opciones: iphone 4s, samsung S4… pero esa pantalla fullhd, 16gb o su diseño innovador acabaron por decantarme por el hasta la actualidad.</p>

<p>En ese año se estaba estrenando ‘Her’ en España, una película de Spike Jonze sobre la soledad en un mundo tan interconectado donde el protagonista se acabaría enamorando de una inteligencia artificial. Una interesante historia donde las maquinas ayudaban a los humanos en momentos de soledad en un futuro distópico donde el protagonista se ganaba la vida escribiendo cartas personales a los demás. Todo muy loco, pero que fue una señal premonitoria de lo que acabaría viviendo en mis propias carnes con el tiempo.</p>

<div class="elem">
    
    
    <div style="padding-top: 56.25%; position: relative;">
        <iframe data-src="//coub.com/embed/3xwd5?" allowfullscreen="" frameborder="0" height="100%" width="100%" allow="autoplay"></iframe>
    </div>
    
    
    
    
    
</div>

<p>Así que con todo esto, me gustaría dedicarle un post a mi smartphone, un móvil con el que he compartido algunos de los mejores momentos y que ha supuesto un cambio importante para mejor. Y aquí os contare lo que ha supuesto para mí su llegada en mi vida, como nos conocimos, los momentos buenos vividos y los baches con los que nos encontramos durante todo este tiempo.</p>

<p>La verdad es que muy poca gente se abre en canal al respecto de su relación con su smartphone. Das una patada al aire y te sale un montón de gente presumiendo de su homosexualidad, de ser bisexual o lo que sea, parece que se ha convertido en un tema tabú amar un dispositivo. Yo siempre he dicho que es malo avergonzarse de lo que es un secreto a voces. Porque admitámoslo, no hago más que ver gente tonteando con sus móviles esperando el tren, sentados en el vagón del metro o pendientes del dichoso dispositivo aun cenando con la novia.</p>

<p>El otro día observe a un hombre absorto con la pantalla de su móvil mientras paseaba a su perro y me entro la risa porque no sabía quién llevaba a quien. Cada vez pasamos más tiempo con nuestros móviles que con las personas que más queremos, son la prueba evidente de que somos infieles a lo que de verdad importa.</p>

<p>En ese momento, era escéptico con la propuesta planteada por mi idolatrado Spike, pero el transcurso del tiempo ya se encargó de abofetearme y demostrarme que ‘Her’ ya tiene poco de ciencia ficción en estos tiempos tan convulsos. Pensaba que ese nuevo móvil no me duraría más de dos años, pero no fue así. A las pocas semanas, se amoldo a mi como si fuera una prolongación de mi brazo. Me enseño cosas que hasta ahora ningún otro teléfono me había enseñado entonces. Supo guiarme ante las adversidades y me dio una serie de herramientas que me facilitaron la vida, gracias al gps que tenía integrado.</p>

<p>Con el tiempo, me di cuenta que compartíamos gustos musicales y me empezaba a recomendar canciones por youtube mediante la inteligencia artificial de la aplicación. Todo me di cuenta que eso derivaría en recomendaciones por twitter según mi ideología política. Ello me llevo a pensar que entre nosotros se estaba gestando una química especial difícil de repeler.</p>

<p>Me despierta todas las mañanas con su tonito característico que solo conocemos ambos, prácticamente se ha convertido en mi guía para todo. Podía contarle cualquier secreto que sabía perfectamente que de su memoria interna no saldría. A veces no tengo que usar el asistente de voz que tiene incorporado para entendernos.</p>

<p>La rutina fue afianzando lo nuestro y cada vez pasábamos más horas juntos. Mis padres no veían con buenos ojos que durmiéramos juntos, que me podría dar cáncer por las ondas electromagnéticas, aunque siempre les decía que era peor contraer la gonorrea que tenían algunos amigos míos. Me costó convencerles de que lo nuestro tenía futuro, pero gracias a dios siempre han sido de mente abierta y no pusieron impedimentos con el paso de los meses. Lo primero que hacía nada más levantarme era ver su enorme pantalla para informarme con las notificaciones, era una atracción constante.</p>

<p>La cosa cada vez iba más en serio que compartíamos bañera aun a sabiendas que la no tenía clasificación IP68 del estándar 60529 del IEC (profundidad máxima de 2 metros durante un máximo de 30 minutos en el agua). Pero no me importaba, incluso un día se me mojo por completo, pero conseguí revivirlo con mucho esfuerzo, pensé que lo perdía para siempre. Ese fue uno de los momentos más duros.</p>

<p>En 2016, podría haberme desprendido de él y cambiarlo por un LG G5, pero no lo hice. ¿Porque tengo que desprenderme de el? En esta sociedad no hago más que ver gente que viene y va o relaciones esporádicas que no conducen a nada. La gente solo viene para sonsacarme información o quitarme dinero. Eso ya lo hace mi móvil sin preguntar, Google recolecta mis datos sin notificármelo y las operadoras junto a los micropagos se encargan del resto. Simplemente nos ahorramos la verborrea mutua, ese es el pequeño matiz.</p>

<div class="elem">
    
    
    <div style="padding-top: 56.25%; position: relative;">
        <iframe data-src="//coub.com/embed/1rf16c?" allowfullscreen="" frameborder="0" height="100%" width="100%" allow="autoplay"></iframe>
    </div>
    
    
    
    
    
</div>

<p>Como toda pareja, hemos pasado distintas crisis. He tenido recurrir a aliexpress para reemplazarle la batería en varias ocasiones, también me he visto en la obligación de actualizarlo a Android 9 para mantener encendida la llama del amor. Es gracioso, pero en este aspecto he notado una mejoría: el otro día cenando con los amigos en un italiano y al poco rato me llego una notificación preguntándome que me parecía el restaurante. Estos pequeños gestos son los que me demuestran que las maquinas comienzan a humanizarse. Al final Spike Jonze no estaba tan equivocado con su película, posiblemente fue un visionario al respecto.</p>

<p>Muchos amigos/compañeros de trabajo me dicen que como es posible que continúe con un móvil de 2013. “¿A caso te digo yo porque llevas tantos años con tu mujer?”, les suelo responder. La gente es envidiosa, en cuanto ven que alguien ha encontrado una estabilidad tienden a querer destruirlo. No hago más que ver relaciones de usar y tirar, estamos mal acostumbrados, lo queremos todo para ayer y buscamos reemplazo a todo cuando yo no nos gusta. Hoy va el vagón del metro, levanto la mirada y veo cabezas gachas observando sus pantallas, están viviendo su particular historia de amor y no lo saben. Acaba de romperse el móvil a mi madre, el ciclo se repite y otra nueva aventura comienza. Es un Samsung A20, ya veremos cuánto dura.</p>]]></content><author><name>ivanheral</name></author><category term="opinion" /><summary type="html"><![CDATA[Esta semana pasada no ha sido todo lo placentera que me hubiera gustado que fuera. Una serie de picores por todo el cuerpo me han obligado a acudir en reiteradas ocasiones al ambulatorio para saber el porqué de estos dolores que no me dejaban ni pegar ojo. Tras una revisión, detectaron el problema: una urticaria aguda difícil de tratar con medicamentos. No me quedo más remedio que acudir a urgencias para que me aplicaran un par de inyecciones en el trasero para mitigar los sarpullidos.]]></summary></entry><entry><title type="html">Retrospectiva y situación del blog</title><link href="ivanheral.github.io/opinion/2019/09/11/retrospectiva-situacion-blog-copy.html" rel="alternate" type="text/html" title="Retrospectiva y situación del blog" /><published>2019-09-11T16:00:00+02:00</published><updated>2019-09-11T16:00:00+02:00</updated><id>ivanheral.github.io/opinion/2019/09/11/retrospectiva-situacion-blog%20copy</id><content type="html" xml:base="ivanheral.github.io/opinion/2019/09/11/retrospectiva-situacion-blog-copy.html"><![CDATA[<p>¿Qué tal?, me habéis pillado un poco con las manos en la masa, rematando algunos detallitos para retomar todo esto. Ahora mismo me encuentro haciendo acopio de provisiones mientras pongo a punto el blog con las pilas cargadas. Estaba escuchando “Both sides Now” de Bing Crosby, darme un momento para quitarme los auriculares y tomar asiento mientras os cuento en qué situación me encuentro ahora, bueno mejor dicho mi blog que seguramente es quien os ha traído hasta aquí y lo que motiva a continuar.</p>

<p>Si la memoria no me falla, comencé con el blog durante las primeras cabalgatas de Manuela Carmena. Lo recuerdo porque estaba maquetándola y no podía quitar la mirada del esperpéntico espectáculo que estaba contemplando. Gracias Carmena por recordarme la fecha fatídica, contigo empezó todo. Era mi side-project particular, que ha desaparecido y resurgido de sus cenizas en innumerables ocasiones.</p>

<p>La idea era muy sencilla, publicar un post cada 10 días. En ese momento lo veía factible porque tenía un trabajo casi de funcionario, pero con el tiempo la cosa se fue complicando un poquito. Decidí trabajar más y ya no tenía tiempo libre ni para limpiarme el culo. Me di cuenta que iba con la lengua fuera para alcanzar el objetivo y tiré la toalla. Se suponía que sería un sitio para escribir mis críticas de cine que ya no me publicaban en ningún lado, pero la cosa no fue por esa dirección y os contare un poco lo que paso.</p>

<p>En el primer mes ya me di cuenta que tenía que diversificar el contenido en 4 temáticas: cine, opinión, tutoriales y random. Realmente no me preguntéis por qué escogí esos temas porque a día de hoy no lo tengo muy claro. Supongo que englobaban las cosas que me gustaba tratar en su momento, aunque tengo que decir que continuarán siendo mis temas predilectos en esta nueva etapa.</p>

<p>En los primeros meses, me centre demasiado en los tutoriales. Eran fáciles de preparar y me ayudaban a desconectar del alrededor, pero con el tiempo me di cuenta que no me sentía cómodo planteándolos incluso continuando publicando cosas. Luego me sentía estúpido perdiendo mi tiempo libre en hacerlos de manera totalmente gratuita y eso acabo por deprimirme por completo. No me extraña</p>

<p>Me temo, muy a mi pesar, que en esta nueva etapa no haré nuevos manuales de esos. Dedicare mi tiempo – el poco que tengo - a escribir posts de opinión o random (según se tercie) porque es lo que me motiva actualmente y porque me salen solos de pura desidia. Tenéis mejores tutoriales en otros blogs, no tenéis que buscar mucho para encontrarlos.</p>

<p>¿Como se encuentra el blog? bueno, pues mejor que yo, os lo puedo asegurar. En estos dos años le he insuflado mejoras con commits con nombres tan sugerentes como “changes” o mal comentados fruto de la vagancia. Aquí dentro me siento como en mi propia casa, es un lugar lleno de paz y serenidad donde cada elemento tiene su razón de ser. Todo este ordenado hasta límites insospechables, cada línea de código ha sido estudiada – de manera torpe en muchas ocasiones - hasta el milímetro. 
Actualmente todo funciona gracias a 220 líneas de texto - lo que suele tener el libro de vuestro youtuber favorito - de JavaScript, menos de 5kb. Las variables, la lógica de búsqueda de posts, la animación de las ventanas modales… todo organizadito, limpio y nítido. Vamos, una jodida maravilla para los ojos de un picateclas como yo. Aquí tenéis una gráfica de la cantidad de código que se carga cuando entráis en él y de paso os comentare que lo hace especial:</p>

<div class="elem">
    <div id="dashboard_div" class="chart"></div>
    
    <div class="title-photo">
        <p>Estoy usando una librería chart que ocupa 500kb para enseñaros lo optimizado que esta el blog (Risas enlatadas.)</p>
    </div>
    
</div>

<p>El diseño es propio, pero tiene reminiscencias de twitter (el diseño antiguo, no el horrible de ahora), médium o el país. He ido pillando remaches de aquí y de allá hasta conseguir algo que me convenciera a la vista. Posiblemente he llegado al medio centenar de diseños hasta dar con la tecla correcta que me convenciera.</p>

<p>Dispone de un sistema de “lazy-loading” artesanal que carga los gifs/imágenes según los visualizamos para ahorrar datos a la gente que entra por aquí. Si ya me sabe mal robarles tiempo leyendo mis tontunas como para ir robándoles gigas de su tarifa de datos. Solo tenéis que hacer scroll para que se cargue el contenido multimedia.</p>

<p>Otra particularidad que tiene este sitio web es que la transición entre el post que lees y la portada no implica uno carga de los assets nuevamente. Yo lo suelto por si te interesa saberlo, ya sé que es una tontuna, pero me interesa ser lo más transparente posible. Tampoco te tienes que preocupar por las cookies, pero si un día quedamos y te entra el antojo pues te puedo traer unas que hace mi abuela que están muy buenas.</p>

<p>Del mismo modo, disqus - el sistema de comentarios - no se carga si no hay intención de leer el post, ver los comentarios, aunque tampoco tenéis que preocuparos por eso, no he caído en la cuenta que nadie escribe comentarios por aquí XD. Es muy probable que si estas leyendo este párrafo. Si has llegado hasta este párrafo es muy probable que disqus se te haya cargado, así que mil perdones por los datos que te he robado sin avisar.</p>

<p>Otra idea acertada ha sido mejorar el soporte con gifs de páginas webs tan importantes como giphy, gfycat y coubs. Se ha optimizado la incorporación de vídeos de youtube, tweets y gráficos. Todo ello con el único fin de mejorar la UX o como carajos se llame ahora, vamos, lo que ves por los ojos. Soy todo oídos a cualquier mejora en cuanto a diseño o programación siempre que no me tenga que rascar el bolsillo. También estoy abierto a cualquier aportación económica.</p>

<div class="elem">
    
    
    
    
    <div class="wall_overflow gif">
    <img class="gif" data-src="//thumbs.gfycat.com/FlatPowerfulBlackbear-mobile.jpg" /></div>
    
    
    
    <div class="title-photo">
        <p>Pulsar en la imagen y no me digáis que no es precioso. Se encuentra en fase beta, pero intentare mejorarlo un poquito</p>
    </div>
    
</div>

<p>Continuare usando Jekyll, aunque uno de mis próximos objetivos será eliminarlo por completo y tener la tenue sensación de que el blog me pertenece al 100%. Tendré que hacer algo con los markdowns y los json para migrar todo esto de manera satisfactoria.</p>

<p>Posiblemente me las esté dando de fanfarrón, pero no he visto blog más optimizado como el mío a nivel nacional. No he localizado ninguno parecido, de eso estoy más que seguro y eso que he investigado los blogs de muchos brogrammers patrios. La gente está muy obsesionada con los frameworks de javascript para hacer blogs, espero que algún día abran los ojos.</p>

<p>Y eso es todo, la próxima semana ya empezare con la rutina que me ha recomendado mi psicólogo de publicar mis vivencias por aquí. Así que ya podéis decir a amigos y familiares que el gilipollas de iván ha vuelto. No sé, supongo que nos llevaremos bien, ahora necesito desconectar nuevamente. Me pondré los auriculares y continuare fregando este destartalado sitio escuchando versionados de “Both Sides Now”. Mira que bien, ahora toca escuchar la versión de Frank Sinatra: “And ice crean castles un the air…”</p>]]></content><author><name>ivanheral</name></author><category term="opinion" /><summary type="html"><![CDATA[¿Qué tal?, me habéis pillado un poco con las manos en la masa, rematando algunos detallitos para retomar todo esto. Ahora mismo me encuentro haciendo acopio de provisiones mientras pongo a punto el blog con las pilas cargadas. Estaba escuchando “Both sides Now” de Bing Crosby, darme un momento para quitarme los auriculares y tomar asiento mientras os cuento en qué situación me encuentro ahora, bueno mejor dicho mi blog que seguramente es quien os ha traído hasta aquí y lo que motiva a continuar.]]></summary></entry><entry><title type="html">Reflexiones y vuelta al trabajo</title><link href="ivanheral.github.io/opinion/2019/09/08/reflexiones-trabajo.html" rel="alternate" type="text/html" title="Reflexiones y vuelta al trabajo" /><published>2019-09-08T16:00:00+02:00</published><updated>2019-09-08T16:00:00+02:00</updated><id>ivanheral.github.io/opinion/2019/09/08/reflexiones-trabajo</id><content type="html" xml:base="ivanheral.github.io/opinion/2019/09/08/reflexiones-trabajo.html"><![CDATA[<p>Me acabo de dar cuenta de que es hora de regresar, para que voy a mentir, pero tranquilos, mi ausencia no fue culpa vuestra. Las cosas no han funcionado como yo esperaba (bueno, no como me hubieran gustado). Fui un iluso, pensé que era omnisciente, pero todo se ha escapado de mi propio control. La gente me agota. No supe gestionarlo. Os pido perdón.</p>

<p>Hace casi 3 años que abandone este blog, desaparecí y me teletransporte al espacio, concretamente a marte por propia voluntad. Aquí prevalece la inmovilidad, el tiempo es más difícil de percibir y todo se ve de maneras más simple.  Necesitaba alejarme del mundanal ruido y desconectar de todo, era muy frustrante continuar con esto. Aquí todo solo hay partículas que conforman llanuras de lo que en su día eran relojes de arenas.</p>

<div class="elem">
    
    
    
    
    <div class="wall_overflow gif">
    <img class="gif" data-src="//thumbs.gfycat.com/IllDistantHoopoe-mobile.jpg" /></div>
    
    
    
</div>

<p>Uno de los primeros motivos para huir era el entorno. Principalmente estaba cansado de la tierra, sobre todo de las personas que lo habitan y que venían a mi para contarme sus problemas. Es agotador estar enredado en la maraña que conforman sus vidas para darme cuenta más tarde que no estaba viviendo mi propia vida. Pensaba que ocultándome detrás de un escueto átomo de hidrógeno sería suficiente para salvaguardar mi identidad, pero no ha sido así. Aquí he podido desarrollar mi creatividad sin interferir en los demás. He sido feliz durante un instante que se ha alargado en el tiempo terrestre.</p>

<p>La gente que no tenemos problemas en la vida somos un blanco fácil y no les falta razón. No suelo hablar de mi vida para no herir sensibilidades, intento esquivar que la gente me conozca. Prefiero que se lleven una idea artificiosa y equivocada de mí para preservar mi identidad secreta.</p>

<p>Lamentablemente incorporé a mi vida cotidiana los mis problemas de los demás y comencé a sentir que todo que hacía erra incorrecto y no iba a ningún puerto. Aquí esas cosas no pasan, todo tiene su cometido y su razón de ser.</p>

<p>He perdido la cuenta de la cantidad de personalidades que he tenido que llevar sobre mis espaldas para volverme inmune y poder sortear la ansiedad. A veces peco de ser algo incomodo, ya nadie habla claro y me cuesta descifrar lo que me intentáis contar. Nadie escucha. No sabéis lo horrible que es ver las cosas como realmente son y no como te las suelen contar. No sé para qué sirve analizar mi pasado, presente y futuro al mismo tiempo si me doy cuenta que la mejor decisión es hacer que todo siga igual.</p>

<p>De vez en cuando traía gente de visita a este inhóspito planeta, les explico mi punto de vista de las cosas y les asusto, porque pensaban que era una visión horrible. Me aterra que la gente se genere ilusiones irrealizables, son carne de depresiones. Necesitamos encontrar un punto intermedio.</p>

<p>Continuáis alabando este mundo de imperfecciones porque os beneficia y me tengo que callar para poder convivir con vosotros. Al principio pensaba que estaba encerrado con ellos, pero son ellos los que están encerrados conmigo. Perdí la motivación por completo y solo deseaba que mi existencia terminara de la manera menos indolora posible.</p>

<p>Llevo toda vida contemplando gente disfrazada mientras disimulo no darme cuenta. Dicen ser superhéroes, pero desde mi punto de vista no veo más que gente carente de principios, desesperada que intenta por todos los medios salir a la superficie. No me siento a gusto con ellos, pero no tengo muchas alternativas.</p>

<div class="elem">
    
    
    
    
    <div class="wall_overflow gif">
    <img class="gif" data-src="//thumbs.gfycat.com/AchingAffectionateEmperorpenguin-mobile.jpg" /></div>
    
    
    
</div>

<p>Nunca entenderé porque la gente se hacen tantas fotografías, muchas de estas no reflejan el estado anímico y tiempo que intentan transmitir, lo veo como una engañifa. No hago más que observar sus fotografías para desgranar algo de verdad en sus maltrechas vidas. Posiblemente las acumulen para usarlas de placebo durante la vejez y recordar aquello que pudieron hacer o auto engañarse continuamente. No tengo fotos, prefiero echar la vista atrás y ver las pisadas que voy dejando en la superficie marciana.</p>

<p>Asiento con la cabeza cuando me cuentan sus planes de futuro, a veces me siento culpable por apoyar sus ilusiones y no se lastimen. Solo quiero que los engranajes continúen girando para que el maravilloso caos en el que se han convertido sus vidas se mantenga girando en torno a mí persona. No estoy pidiendo un imposible.</p>

<div class="elem">
    
    
    
    
    <div class="wall_overflow gif">
    <img class="gif" data-src="//thumbs.gfycat.com/AdorableRewardingAmericancrow-mobile.jpg" /></div>
    
    
    
</div>

<p>A pesar de todo esto, puedo decir que la cosa ha mejorado un poco, sigo con una mentalidad determinista, todo lo que nos deparará la vida ya está escrito. De vez en cuando esbozo una sonrisa cuando los designios de mi destino son tachados y corregidos sin tomar cartas en el asunto. Ya nada me sorprende. Se podría decir que tengo la vitalidad suficiente para escribir algunos posts antes de que termine este año, posiblemente el ultimo antes de que todo explote.</p>

<p>Existen personas que se rigen por las manecillas del reloj, son esclavos del tiempo de los demás y no lo saben. Luego están los libres que no se doblegan a horarios y se dedican a robar el tiempo de los demás. Yo he optado por perder el tiempo fabricando relojes, la opción más sensata. No recuerdo cuando sentí miedo por última vez, supongo que no me queda más remedio que continuar con esto hasta el final…</p>]]></content><author><name>ivanheral</name></author><category term="opinion" /><summary type="html"><![CDATA[Me acabo de dar cuenta de que es hora de regresar, para que voy a mentir, pero tranquilos, mi ausencia no fue culpa vuestra. Las cosas no han funcionado como yo esperaba (bueno, no como me hubieran gustado). Fui un iluso, pensé que era omnisciente, pero todo se ha escapado de mi propio control. La gente me agota. No supe gestionarlo. Os pido perdón.]]></summary></entry><entry><title type="html">Tutorial. Entorno con Taskr, Rollup y Yarn</title><link href="ivanheral.github.io/tutorial/2017/02/11/entorno-desarrollo-taskr-rollup-yarn.html" rel="alternate" type="text/html" title="Tutorial. Entorno con Taskr, Rollup y Yarn" /><published>2017-02-11T15:00:00+01:00</published><updated>2017-02-11T15:00:00+01:00</updated><id>ivanheral.github.io/tutorial/2017/02/11/entorno-desarrollo-taskr-rollup-yarn</id><content type="html" xml:base="ivanheral.github.io/tutorial/2017/02/11/entorno-desarrollo-taskr-rollup-yarn.html"><![CDATA[<p>¿Cansado de utilizar grunt/gulp para tus proyectos web? ¿Has intentado dar el salto a webpack pero te ha parecido engorroso y poco intuitivo? No te preocupes. Hoy te presentamos <strong>Taskr</strong>, una alternativa que te permitirá realizar proyectos sencillos con una curva de aprendizaje muy baja.</p>

<p><strong>Taskr</strong> es un generador de tareas/rutinas que se caracteriza por su sencillez y velocidad con respecto a otras alternativas. Estaba un poco abandonado, aunque en estos últimos meses ha podido resurgir de sus cenizas gracias a la ayuda  de <a href="http://github.com/lukeed">lukeed</a> y otros tantos.</p>

<p>Antes que nada, necesitaremos una versión actualizada de node (mínimo 6.9), es importante recalcar esto para evitarnos sorpresas inesperadas cuando arranquemos con esto. En este tutorial os explicaremos como usarlo de manera rápida y clara para un proyecto de <strong>AngularJs</strong> como ejemplo. Sin más preámbulos, comenzamos.</p>

<div class="elem">
    
    
    
    <div class="wall_overflow gif">
        <img class="gif" data-src="//media2.giphy.com/media/5iAHCEdbyEZCo/giphy_s.gif" /></div>
    
    
    
    
    <div class="title-photo">
        <p>Es un pájaro, es un avión, no... Es Taskr!</p>
    </div>
    
</div>

<p>Lo primero que tendremos que hacer es crearnos una carpeta llamada Taskr, en ella generaremos un <strong>package.json</strong> y un <strong>bower.json</strong> con los comandos <strong>npm init</strong> y <strong>bower init</strong> respectivamente. En estos ficheros instalaremos todo aquello que sea necesario para montar nuestra web, es importante recalcar que tendreis que instalar npm y bower previamente.</p>

<p>A continuación, crearemos una carpeta <strong>src</strong> en la carpeta Taskr donde alojaremos las carpetas divididas según el tipo de ficheros que contengan: javascript, css, html, imagenes y vendors. Más adelante explicaremos que ficheros contendrán dichas carpetas con sus correspondientes rutas para no liarnos.</p>

<p>Ahora pasaremos a generar nuestro <strong>taskfile.js</strong> en <strong>src</strong>, este fichero actuara como archivo de configuración cuando ejecutemos el comando <strong>taskr</strong>. En este fichero se escribirán las tareas que necesitemos. La estructura de ficheros y carpetas quedaría del siguiente modo:</p>
<pre>
    <code class="language-files">
Taskr/ /* Carpeta raiz */
--- src/ /* Carpeta src */
-------- /css /* Los estilos */
-------- /html /* Los htmls */
-------- /img /* Las imagenes */
-------- /js /* Los javascripts */
-------- /vendors /* Librerias externas */
--- package.json
--- bower.json
--- taskfile.js
    </code>    
</pre>

<p>Bueno, ahora pasamos al quid de la cuestión. Nuestra aplicación de ejemplo estará basada en <strong>AngularJs</strong> como ya he dicho anteriormente con las siguientes características: tendrá dos páginas y estará en español/ingles. Por si esto no fuera suficiente, incluiremos librerías externas como leaflet para que muestren un mapa y darle un poco de vidilla. Todo esto lo instalaremos con los siguientes comandos desde la carpeta <strong>Taskr</strong>:</p>
<pre>
    <code class="language-bash">
/* Instalamos angular y otros componentes relacionados con npm */
npm install --save angular angular-ui-router angular-translate 

/* Instalamos leaflet y su directiva para angular con bower. Escoger la 1.0.0 */
bower install --save leaflet angular-leaflet-directive
    </code>    
</pre>

<p>Ahora toca lo más importante. Instalamos Taskr junto a los siguientes plugins para echar a rodar el proyecto -&gt; <strong>@taskr/esnext:</strong> nos permitirá usar sintaxis ES6/7 en nuestro taskfile.js y crear tareas asíncronas. <strong>@taskr/clear:</strong> plugin para realizar borrados de ficheros. <strong>@taskr/watch:</strong> plugin que nos permite lanzar tareas cuando se produzcan modificaciones. Este sería el comando para empezar a “volar”:</p>
<pre>
<code class="language-bash">
/* Instalamos taskr y algunos de sus plugins  */
npm install --save-dev taskr @taskr/esnext @taskr/clear @taskr/watch
</code>    
</pre>

<p><strong>taskfile.js:</strong> Retomamos con el archivo de configuración para centrarnos en su contenido. Este fichero se dividirá en 3 partes: (1) Declaración de variables, (2) Tarea <strong>default</strong> que se ejecutara al arrancar con el comando <strong>taskr</strong> por terminal y (3) Definición de nuestras propias tareas:</p>

<pre>
    <code class="language-js">
/* (1) Declaración de variables */

/* Tarea default */
export default async function (task) {
/* (2) Arranque de tareas */
}
/* (3) Definición de tareas */
    </code>    
</pre>

<p>A partir de aquí nos centraremos en añadir tareas de forma acumulativa en la parte <strong>(3)</strong> desglosándolas en función del tipo de ficheros que vayamos a tratar (html, css, imagenes, js y vendors).</p>

<p>Después de esto, incluiremos eventos <strong>@taskr/watch</strong> por cada una de estas tareas en la tarea <strong>default</strong>  (parte <strong>(2)</strong>, que no es os olvide). De este modo, nuestras tareas se ejecutarán cada vez que modifiquemos los ficheros que nosotros fijemos, ya sea mediante rutas o por extensiones de ficheros. 
En la parte <strong>(1)</strong> se incluirán aquellos elementos ajenos a taskr y sus plugins pero que son fundamentales para generar nuestro proyecto. Os dejo a continuación las tareas que tendremos que añadir para realizar nuestra web de manera correcta según lo descrito anteriormente:</p>

<div class="post-title page">Browser-sync</div>

<p>Nuestra 1º tarea será montar todo nuestro proyecto en una carpeta denominada dist para posteriormente desplegarla y poder trabajar con ella en caliente. Esto no se conseguiría si no fuera por la inestimable ayuda de <strong>browser-sync</strong> y <strong>connect-history-api-fallback</strong>, así que pasamos a instalarlos:</p>
<pre>
    <code class="language-bash">
/* Instalamos browser-sync y connect-history-api-fallback */
npm install --save-dev browser-sync connect-history-api-fallback
    </code>    
</pre>

<p><strong>Tarea serve.</strong> Ahora toca modificar nuestro <strong>taskfile.js</strong>. Definiremos unas variables para agregar browser-sync y connect-history-api-fallback. Declararemos una tarea <strong>serve</strong> para poder inicializar nuestro servidor de “pruebas” en la carpeta dist por el puerto 3000. Finalmente añadiremos la tarea <strong>serve</strong> en la tarea <strong>default</strong> de <strong>taskfile.js</strong> para que arranque con <strong>task.start</strong>:</p>
<pre>
    <code class="language-js">
/* (1) Declaración de variables */
var bs = require('browser-sync');
var historyApiFallback = require('connect-history-api-fallback');

export default async function (task) {
/* (2) Arranque de tareas */
    await task.start('serve')
}

/* (3) Definición de tareas */
export async function serve(task) {
    bs({
        server: 'dist'
        , middleware: [historyApiFallback()]
    });
}
    </code>    
</pre>

<div class="post-title page">Imagenes</div>

<p><strong>Tarea copyImg.</strong> Copiaremos nuestras imágenes de <strong>src/img</strong> a <strong>dist/img</strong>, ningún misterio al respecto. La tarea se llamará <strong>copyImg</strong> que se encargará de borrar con <strong>clear</strong> cualquier imagen de dist, recolectar todas las imágenes de <strong>src/img</strong> con <strong>source</strong> y finalmente duplicarlas a la carpeta <strong>dist/img</strong> con <strong>target</strong>.</p>

<p>Añadiremos la tarea <strong>copyImg</strong> en la tarea <strong>default</strong> de <strong>taskfile.js</strong> y usaremos el evento <strong>task.watch</strong> para que se vuelva a ejecutar cada vez que detecte modificaciones en <strong>src/img</strong>:</p>

<pre>
    <code class="language-js">
export default async function (task) {
/* (2) Arranque de tareas */
    await task.watch('src/img/**/*.*', 'copyImg')
}

/* (3) Definición de tarea copyImg */
export async function copyImg(task) {
    await task.clear(['dist/img/**/*.*']).source('src/img/**/*.*').target('dist/img')
}
    </code>    
</pre>

<div class="post-title page">Css</div>

<p>Ahora toca un tema peliagudo como son los estilos. Necesitaremos dos plugins de Taskr: <strong>@taskr/sass</strong> (para usar precompiladores como sass) y <strong>taskr-autoprefixer</strong> (para añadir autoprefixer). También instalaremos <strong>bootstrap-sass</strong> para tener algo de chicha y poder trabajar:</p>

<pre>
    <code class="language-bash">
/* Instalamos @taskr/sass, taskr-autoprefixer y bootstrap */
npm install --save-dev @taskr/sass taskr-autoprefixer bootstrap-sass
    </code>    
</pre>

<p><strong>src/css/app.sass:</strong> A continuación crearemos un fichero <strong>app.sass</strong> en la ruta <strong>src/css</strong> con los módulos necesarios para que nuestra web se muestre correctamente. Importaremos bootstrap desde <strong>node_modules</strong> y copiaremos el contenido del fichero <strong>bower_components/leaflet/dist/leaflet.css</strong> (previamente instalado con bower) en <strong>src/css/modules</strong> con el nombre <strong>leaflet.scss</strong>. Finalmente nuestro fichero app.sass quedaría del siguiente modo:</p>
<pre>
    <code class="language-sass">
@import '../../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss'
@import 'modules/leaflet.scss'
    </code>    
</pre>

<p><strong>Tarea copyStyles.</strong> Esta tarea compilara el fichero <strong>src/css/app.sass</strong> gracias a los plugins <strong>@taskr/sass</strong> y <strong>taskr-autoprefixer</strong> dejando el resultado en la carpeta dist.</p>

<p>Solo falta añadir un <strong>@taskr/watch</strong> en la tarea <strong>default</strong> de <strong>taskfile.js</strong> para que se vuelva a construir nuestro <strong>css</strong> cuando detecte modificaciones en algún fichero scss de <strong>src/css</strong> o en <strong>src/css/app.sass</strong>. Nuestro browser-sync (bs) se encargará de refrescar el <strong>app.css</strong> de dist cada vez que se ejecute <strong>copyStyles</strong>:</p>
<pre>
    <code class="language-js">
export default async function (task) {
/* (2) Arranque de tareas */
    await task.watch(['src/css/**/*.scss', 'src/css/app.sass'], 'copyStyles')
}

/* (3) Definición de tarea copyStyles */
export async function copyStyles(task) {
    await task.source('src/css/app.sass').sass().autoprefixer().target('dist')
    /* reload */
    bs.reload('app.css')
}
    </code>    
</pre>

<div class="post-title page">Vendors</div>

<p>Pasamos a las librerías externas. Necesitaremos el plugin <strong>@taskr/browserify</strong> para empaquetar todas estas librerías en un solo fichero <strong>vendors.js</strong> siendo posteriormente trasladado a la carpeta dist:</p>
<pre>
    <code class="language-bash">
/* Instalamos @taskr/browserify */
npm install --save-dev @taskr/browserify
    </code>    
</pre>

<p><strong>src/vendors/vendors.js:</strong> Aquí indicaremos la ruta de los ficheros que necesitamos obligatoriamente para dibujar nuestro mapa con <strong>leaflet</strong> y que previamente instalamos con <strong>bower</strong>:</p>
<pre>
    <code class="language-js">
require('../../bower_components/leaflet/dist/leaflet.js');
require('../../bower_components/angular-leaflet-directive/dist/angular-leaflet-directive.js');
    </code>    
</pre>

<p><strong>Tarea copyVendors.</strong> Esta tarea cogerá el fichero <strong>src/vendors/vendors.js</strong>, lo empaquetara y lo entregara en dist. Añadiremos un <strong>@taskr/watch</strong> que lance <strong>copyVendors</strong> cada vez que modifiquemos el fichero <strong>src/vendors/vendors.js</strong>. 
Nuestro browser-sync (bs) se encargará de refrescar <strong>vendors.js</strong> de la carpeta dist cada vez que se ejecute <strong>copyVendors</strong>:</p>

<pre>
    <code class="language-js">
export default async function (task) {
/* (2) Arranque de tareas */
    await task.watch('src/vendors/vendors.js', 'copyVendors')
}

/* (3) Definición de tareas */
export async function copyVendors(task) {
    await task.source('src/vendors/vendors.js').browserify().target('dist')
    /* reload */
    bs.reload('vendors.js')
}
    </code>    
</pre>

<div class="post-title page">Javascript</div>

<p>Usaremos nuevamente el plugin @taskr/browserify para empaquetar toda nuestra app con <strong>AngularJs</strong> pero con el añadido de usar babel para pasar nuestro código de ES6 a ES5. Necesitaremos instalar los siguientes paquetes:</p>
<pre>
    <code class="language-bash">
/* Instalamos babelify y babel-preset-es2015 */
npm install --save-dev babelify babel-preset-es2015
    </code>    
</pre>

<p>Pasaremos a enumerar los 4 ficheros que contendrá <strong>src/js</strong> para completar el armazón de nuestra aplicación:</p>

<p><strong>src/js/app.js.</strong> Este fichero importara angular y sus módulos (<strong>app.modules.js</strong>) junto a los dos controladores (<strong>header</strong> y <strong>home</strong>). Tan solo nos quedara configurar las traducciones y las rutas:</p>
<pre>
    <code class="language-js">
import * as App from './app.modules.js'
import * as Home from './controllers/home-controller.js'
import * as Header from './controllers/header-controller.js'
let app = angular.module('app', ['app.map', 'app.header', 'ui.router', 'pascalprecht.translate', 'leaflet-directive'])
router.$inject = ['$stateProvider', '$urlRouterProvider']

function router($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/map/ivan')
    var mapState = {
        url: '/map/:id'
        , views: {
            '@': {
                templateUrl: './views/map.html'
            }
        }
    }
    var aboutState = {
        url: '/about'
        , views: {
            '@': {
                templateUrl: './views/about.html'
            }
        }
    }
    $stateProvider.state('map', mapState)
    $stateProvider.state('about', aboutState)
}
translation.$inject = ['$translateProvider']

function translation($translateProvider) {
    $translateProvider.translations('es', {
        MAP: 'Mapa'
        , ABOUT: 'Sobre mi'
        , BUTTON_LANG_EN: 'ingles'
        , BUTTON_LANG_ES: 'español'
    })
    $translateProvider.translations('en', {
        MAP: 'Map'
        , ABOUT: 'About me'
        , BUTTON_LANG_EN: 'english'
        , BUTTON_LANG_ES: 'spanish'
    })
    $translateProvider.preferredLanguage('es')
}
app.config(router).config(translation)
    </code>    
</pre>

<p><strong>src/js/app.modules.js:</strong> Aquí importaremos angular, angular-ui-router y angular-translate. Este fichero nos servirá también para registrar los módulos que empleemos. <strong>app.map</strong> será el modulo del controlador para visualizar el mapa y <strong>app.header</strong> se encargara de permitirnos cambiar el idioma:</p>
<pre>
    <code class="language-js">
import angular from 'angular'
import router from 'angular-ui-router'
import translate from 'angular-translate'

/* register Modules */
angular.module('app.map', [])
angular.module('app.header', [])
    </code>    
</pre>

<p><strong>src/js/controllers/header-controller.js.</strong> Este es el modulo <strong>app.header</strong> con un constructor <strong>headerController</strong> que tiene una función para cambiar el idioma:</p>

<pre>
    <code class="language-js">
angular.module('app.header').controller('headerController', ['$scope', '$translate', function ($scope, $translate) {
    $scope.changeLanguage = function (key) {        
        $translate.use(key);          
    };
}]);
    </code>    
</pre>

<p><strong>src/js/controllers/home-controller.js.</strong> Este es el modulo <strong>app.map</strong> con un constructor <strong>homeController</strong> que tiene un centro con sus coordenadas y un <strong>id</strong> para visualizar el parámetro <strong>id</strong> de la url <strong>map/:id</strong>:</p>

<pre>
    <code class="language-js">
angular.module('app.map').controller('homeController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    
    $scope.center = {
        lat: 51.505,
        lng: -0.09,
        zoom: 8
    };
    
    let self = this;
    self.id = $stateParams.id;
}]);
    </code>    
</pre>

<p><strong>Tarea babel.</strong> Esta tarea compilara el fichero <strong>src/js/app.js</strong> gracias al plugin <strong>@taskr/browserify</strong> dejando el resultado en la carpeta dist. Solo falta añadir un <strong>@taskr/watch</strong> en la tarea <strong>default</strong> de <strong>taskfile.js</strong> para que se vuelva a construir nuestro <strong>app.js</strong> cuando detecte modificaciones en algún fichero js de <strong>src/js</strong>. Nuestro browser-sync (bs) se encargará de refrescar el <strong>app.js</strong>.</p>

<p>Usaremos una variable <strong>is_js</strong> para controlar modificaciones masivas de ficheros javascript, de esta forma nos aseguramos que construye la app una sola vez ante múltiples guardados simultáneos:</p>
<pre>
    <code class="language-js">
/* (1) Declaración de variables */
var is_js = 0;

export default async function (task) {
/* (2) Arranque de tareas */
    await task.watch('src/js/**/*.js', 'babel')
}

/* (3) Definición de tareas */
export async function babel(task) {
    is_js += 1;
    if (is_js == 1) {
        await task.source('src/js/app.js').browserify({
            transform: [require("babelify").configure({
                presets: ['es2015']
            })]
        }).target('dist')
    }
    is_js -= 1;
    if (is_js == 0) bs.reload('app.js')
}
    </code>    
</pre>

<div class="post-title page">Html</div>

<p><strong>Tarea copyHtml.</strong> Copiaremos nuestros htmls de <strong>src/html</strong> a dist. La tarea se llamará <strong>copyHtml</strong> que se encargará de borrar con <strong>clear</strong> cualquier html de dist, recolectar todas los htmls de <strong>src/html</strong> con <strong>source</strong> y finalmente duplicarlas a la carpeta dist con <strong>target</strong>:</p>
<pre>
    <code class="language-js">
export default async function (task) {
/* (2) Arranque de tareas */
    await task.watch('src/html/**/*.html', 'copyHtml')
}

/* (3) Definición de tareas */
export async function copyHtml(task) {
    await task.clear(['dist/**/*.html']).source('src/html/**/*.html').target('dist')
    /* reload */
    bs.reload('**/*.html')
}
    </code>    
</pre>

<p><strong>src/html/index.html.</strong> Fichero principal que tirara del <strong>app.js</strong> y <strong>vendors.js</strong> creados por las tareas <strong>babel</strong> y <strong>copyVendors</strong>. Se usará un componente <strong>commons/menu.html</strong> para representar un menu de navegacion. Por último, incluiremos el <strong>app.css</strong> creado por <strong>copyStyles</strong> en el index:</p>
<pre>
    <code class="language-html">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Angular&lt;/title&gt;
    &lt;link rel="stylesheet" href="app.css"&gt;
&lt;/head&gt;
&lt;body ng-app="app"&gt;
    &lt;div class="container"&gt;
        &lt;ng-include src="'./commons/menu.html'"&gt;&lt;/ng-include&gt;
        &lt;ui-view&gt;&lt;/ui-view&gt;
    &lt;/div&gt;
    &lt;script src="app.js"&gt;&lt;/script&gt;
    &lt;script src="vendors.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;    
</code>
</pre>

<p><strong>src/html/views/map.html.</strong> La vista del mapa con su correspondiente etiqueta <strong>leaflet</strong> para representar nuestro mapa:</p>
<pre>
    <code class="language-html">
&lt;div ng-controller="homeController as hd"&gt;
    &lt;h1&gt;{{ 'MAP' | translate }} - id:{{hd.id}}&lt;/h1&gt;
        &lt;leaflet lf-center="center" height="480px"&gt;&lt;/leaflet&gt;
&lt;/div&gt;
</code>
</pre>

<p><strong>src/html/views/about.html.</strong> Una vista muy sencilla que no necesita mucha explicación al respecto:</p>
<pre>
    <code class="language-html">
&lt;h1&gt;{{ 'ABOUT' | translate }}&lt;/h1&gt; 
</code>
</pre>

<p><strong>src/html/commons/menu.html.</strong> El menú de navegación para cambiar el idioma y alternar vistas según queramos:</p>
<pre>
    <code class="language-html">
&lt;div ng-controller="headerController"&gt;
    &lt;ol class="breadcrumb"&gt;
        &lt;li&gt;&lt;a ui-sref="map" ui-sref-active="active"&gt;{{ 'MAP' | translate }}&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a ui-sref="about" ui-sref-active="active"&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a ng-click="changeLanguage('en')"&gt;{{ 'BUTTON_LANG_EN' | translate }}&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a ng-click="changeLanguage('es')"&gt;{{ 'BUTTON_LANG_ES' | translate }}&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;  
    </code>
</pre>

<div class="post-title page">Yarn</div>

<p>Habéis podido comprobar que nos hemos centrado en incluir eventos <strong>@taskr/watch</strong> dentro de la tarea default. Eso está muy bien para recargarnos nuestro proyecto cada vez que cambiemos alguna cosa, pero se nos olvida lo más fundamental, construirlo todo nada más arrancarlo.</p>

<p><strong>Tarea build.</strong> Esta tarea ejecutara en paralelo todas las tareas definidas anteriormente para construirlo todo en la carpeta dist. Usaremos <strong>task.clear</strong> para eliminar cualquier contenido previo de dist y lanzaremos un <strong>task.parallel</strong> para reconstruirlo todo. No debemos olvidarnos de incluir un evento <strong>task.start</strong> en la tarea default para arrancarla desde el inicio:</p>
<pre>
    <code class="language-js">
export default async function (task) {
/* (2) Arranque de tareas */
    await task.start('build')
}

/* (3) Definición de tareas */
export async function build(task) {
    await task.clear(['dist']).parallel(['copyVendors', 'babel', 'copyHtml', 'copyImg', 'copyStyles'])
}
    </code>    
</pre>

<p>Ya casi hemos terminado, solo nos falta añadir algunos scripts en nuestro <strong>package.json</strong>. <strong>start:</strong> para lanzar la tarea default del archivo de configuración <strong>taskfile.js</strong>, <strong>server</strong> para lanzar la web en un navegador y <strong>download</strong> para descargar todos los paquetes necesarios. En este último script se ha reemplazado npm por yarn:</p>
<pre>
    <code class="language-json">
"scripts": {
    "start": "taskr",
    "server": "taskr serve",
    "download": "yarn install &amp;&amp; bower install"
  }
      </code>    
</pre>

<p>Yarn es un instalador de paquetes creado por Facebook en octubre de 2016 que se diferencia de <strong>npm</strong> por su alto desempeño alcanzando mejores tiempos que su competidor. Podéis instalarlo con un simple <strong>npm install -g yarn</strong>, os dejo los tiempos que obtuve descargando todos los paquetes con ambos en mi equipo:</p>
<pre>
    <code class="language-bash">
/* Tiempo con npmn sin cache */
50.235s

/* Tiempo con npm con cache */
27.184s

/* Tiempo con yarn sin cache */
17.67s

/* Tiempo con yarn con cache */
9.40s
    </code>    
</pre>

<div class="post-title page">Rollup</div>

<p>Para ir terminando podemos incluir una tarea bundle con ayuda de Rollup para disminuir el tamaño nuestra app. Usaremos el plugin <strong>fly-rollup</strong> junto a algunos plugins de Rollup: <strong>uglify</strong> para disminuir su tamaño, <strong>commonjs</strong> para convertir modulos commonjs a ES6 y <strong>node-resolve</strong> para usar modulos de terceros descargados en <strong>node_module</strong>:</p>
<pre>
    <code class="language-bash">
/* Instalamos algunos plugins de rollup */
npm install --save-dev fly-rollup rollup-plugin-babel rollup-plugin-commonjs rollup-plugin-node-resolve rollup-plugin-uglify
    </code>    
</pre>
<p><strong>Tarea bundle.</strong> Ok, tan solo tendremos que aplicar todos los plugins de Rollup en <strong>src/js/app.js</strong> y dejar el resultado en una nueva carpeta de nombre <strong>bundle</strong>:</p>
<pre>
    <code class="language-js">
export async function bundle(task) {
    await task.source('src/js/app.js').rollup({
        rollup: {
            plugins: [require('rollup-plugin-babel')({
                    presets: [["es2015", {"modules": false}]]
                }),
                require('rollup-plugin-node-resolve')
                ({main: true, jsnext: true, browser: true}),
                require('rollup-plugin-commonjs')(), 
                require('rollup-plugin-uglify')()]
        }
        , bundle: {format: 'iife'}
    }).target('bundle')
}
</code>
</pre>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/FPQmuewYj5c/mqdefault.jpg" id="FPQmuewYj5c" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Es una gozada ver lo rapido que responde</p>
    </div>
    
</div>

<p><strong>Conclusiones:</strong> La verdad es que <strong>Taskr</strong> sorprende gratamente, con un fichero muy pequeño (70 lineas) tenemos montado un entorno para trabajar la mar de sencillo. Más rápido que gulp y más sencillo de comprender que webpack, no se puede pedir más por menos. Lo único que se le puede achacar es su escasez de plugins pero supongo que con el tiempo acabaran apareciendo nuevos. Dejo el código como siempre:</p>

<p><a class="btn" href="https://www.dropbox.com/s/wdemdhqiato4qbz/Taskr.tar.gz?dl=0" target="_blank">
Código del Tutorial
</a></p>]]></content><author><name>ivanheral</name></author><category term="tutorial" /><summary type="html"><![CDATA[¿Cansado de utilizar grunt/gulp para tus proyectos web? ¿Has intentado dar el salto a webpack pero te ha parecido engorroso y poco intuitivo? No te preocupes. Hoy te presentamos Taskr, una alternativa que te permitirá realizar proyectos sencillos con una curva de aprendizaje muy baja.]]></summary></entry><entry><title type="html">Tutorial. Buscador de gifs con Giphy y Vue.js</title><link href="ivanheral.github.io/tutorial/2016/08/12/tutorial-buscador-gifs-giphy-vuejs.html" rel="alternate" type="text/html" title="Tutorial. Buscador de gifs con Giphy y Vue.js" /><published>2016-08-12T16:00:00+02:00</published><updated>2016-08-12T16:00:00+02:00</updated><id>ivanheral.github.io/tutorial/2016/08/12/tutorial-buscador-gifs-giphy-vuejs</id><content type="html" xml:base="ivanheral.github.io/tutorial/2016/08/12/tutorial-buscador-gifs-giphy-vuejs.html"><![CDATA[<p>Bueno chicos, hoy realizaremos un buscador de gifs usando exclusivamente Vue.js, un framework que a diferencia de jQuery nos permite poner javascript en el propio DOM evitándonos selecciones innecesarias. Para hacerlo más interesante he contado con la colaboración de la Api Giphy, bastante popular tras su integración en twitter.</p>

<div class="elem">
    
    
    
    <div class="wall_overflow gif">
        <img class="gif" data-src="//media2.giphy.com/media/xTiTnJ0uuZEwVlYQog/giphy_s.gif" /></div>
    
    
    
    
    <div class="title-photo">
        <p>API Giphy nos permite obtener gifs de manera muy cómoda. Mas info: api.giphy.com</p>
    </div>
    
</div>

<p>Lo primero será crear una carpeta con tan solo 3 archivos. El primero sera <strong>bower.json</strong> que contendrá las dependencias <strong>vue</strong> (sin esto no vamos a ningún sitio), <strong>vue-resource</strong> para hacer las peticiones a la API Giphy y <strong>Font-awesome</strong> para usar su iconografía:</p>

<pre>
    <code class="language-json">
{
  "name": "Vuejs - Tutorial",
  "description": "Giphy with Vuejs",
  "main": "",
  "license": "MIT",
  "homepage": "",
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "vue-resource": "^0.9.3",
    "vue": "^1.0.26",
    "font-awesome": "fontawesome#^4.6.3"
  }
}
    </code>    
</pre>
<p>Pasamos al <strong>package.json</strong>. Me habría gustado haberlo unificado todo en el bower pero vue-infinite-scroll no se encontraba disponible. Aquí instalaremos nuevamente <strong>vue</strong>, <strong>firebase</strong> y <strong>vuefire</strong> (estos dos últimos para crear un histórico de búsquedas):</p>

<pre>
    <code class="language-json">
{
  "name": "vuejs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "dependencies": {
    "firebase": "^2.4.1",
    "vue": "^1.0.26",
    "vue-infinite-scroll": "^0.2.3",
    "vuefire": "^1.2.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "author": "",
  "license": "ISC"
}
    </code>    
</pre>

<p>Y finalmente el <strong>index.html</strong>, un fichero con los scripts &amp; estilos necesarios ya configurados para solo preocuparnos de los <strong>estilos</strong>,  el <strong>DOM</strong> y el <strong>script</strong> como veréis a continuación:</p>

<pre>
<code class="language-html">
&lt;html lang="" id="giphy"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;SEARCH GIFS&lt;/title&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"&gt;
    &lt;link rel="stylesheet" href="bower_components/font-awesome/css/font-awesome.min.css"&gt;
    /* Aqui pondremos los estilos */
&lt;/head&gt;
&lt;body&gt;
    /* Aqui tendremos el DOM */
    &lt;script src="bower_components/vue/dist/vue.min.js"&gt;
    &lt;script src="bower_components/vue-resource/dist/vue-resource.min.js"&gt;
    &lt;script src="node_modules/vue-infinite-scroll/vue-infinite-scroll.js"&gt;
    &lt;script src="node_modules/firebase/lib/firebase-web.js"&gt;
    &lt;script src="node_modules/vuefire/dist/vuefire.min.js"&gt;
    /* Aqui ira el script de Vue.js */
&lt;/body&gt;
&lt;/html&gt;
</code>  
</pre>

<p>Con estos tres ficheros ya tendremos todo lo necesario para tener montado nuestro entorno. Tan solo nos queda descargarnos los componentes con un simple comando:</p>

<pre>
    <code class="language-bash">
npm install &amp;&amp; bower install
    </code>    
</pre>

<p>Nuestro buscador de gifs tendrá un input para buscar por palabras, un select para limitar el número de gifs que se muestran, un botón para buscar y finalmente, otro para reproducir/pausar todos los gifs. Debajo del formulario se colocarán pequeños botones indicándonos las búsquedas realizadas junto a un grid donde se visualizarán los gifs en formato 16:9. Teniendo en cuenta todo esto, nuestro DOM tendrá el siguiente aspecto:</p>

<pre>
<code class="language-html">
&lt;div class="container form"&gt;
/* Formulario de busqueda */
    &lt;form class="row"&gt;
        &lt;div class="form-group col-xs-12 col-sm-6 col-md-3"&gt;
            &lt;input type="text" class="form-control" placeholder="SEARCH"&gt;
        &lt;/div&gt;
        &lt;div class="form-group col-xs-12 col-sm-6 col-md-3"&gt;
            &lt;select class="form-control"&gt;
                &lt;option&gt;32&lt;/option&gt;
                &lt;option&gt;64&lt;/option&gt;
                &lt;option&gt;128&lt;/option&gt;
            &lt;/select&gt;
        &lt;/div&gt;
        &lt;div class="form-group col-xs-6 col-md-3"&gt;
            &lt;a class="btn btn-block btn-primary"&gt;SEARCH&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="form-group col-xs-6 col-md-3"&gt;
            &lt;a class="btn btn-block btn-primary"&gt;
            &lt;i class="fa fa-play"&gt;&lt;/i&gt;&lt;/a&gt;
        &lt;/div&gt;
    &lt;/form&gt;
    &lt;div class="col-xs-12 row record"&gt;               
        &lt;button class="btn btn-default"&gt;Star Wars X&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;
/* Gifs encontrados */
&lt;div class="container grid"&gt;
    &lt;div class='col-xs-6 col-sm-6 col-md-3 col-lg-3'&gt;
        &lt;a&gt;&lt;img&gt;&lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/code&gt;  
&lt;/pre&gt;
</code>
</pre>

<p>Ahora es cuando tendremos que darle de vidilla y conseguir que cumpla con su cometido de encontrarnos esos gifs que tanto ansiamos. Por ejemplo, el input, la variable/modelo <strong>word</strong> recogerá el valor que contiene el input en todo momento:</p>

<pre>
<code class="language-html">
/* AFTER */
&lt;div class="form-group col-xs-12 col-sm-6 col-md-3"&gt;  
    &lt;input type="text" class="form-control" placeholder="SEARCH"&gt;   
&lt;/div&gt;  

/* BEFORE with Vue.js */

&lt;div class="form-group col-xs-12 col-sm-6 col-md-3"&gt;  
    &lt;input type="text" v-model="word" class="form-control" placeholder="SEARCH"&gt;   
&lt;/div&gt;
&lt;/code&gt;  
&lt;/pre&gt;
</code>
</pre>

<p>Pasamos al <strong>select</strong>. Tendrá 4 elementos (32,64,128,256) almacenados en una variable <strong>limits</strong> en forma de lista que detectaran cualquier cambio almacenando el valor de la opción selecciona en <strong>selected</strong>:</p>

<pre>
<code class="language-html">
/* AFTER */
&lt;div class="form-group col-xs-12 col-sm-6 col-md-3"&gt;
    &lt;select class="form-control"&gt;
        &lt;option&gt;32&lt;/option&gt;
        &lt;option&gt;64&lt;/option&gt;
        &lt;option&gt;128&lt;/option&gt;
    &lt;/select&gt;
&lt;/div&gt;

/* BEFORE with Vue.js */

&lt;div class="form-group col-xs-12 col-sm-6 col-md-3"&gt;
    &lt;select class="form-control" v-model="selected"&gt;
        &lt;option v-for="item in limits"&gt;
            {{item}}
        &lt;/option&gt;
    &lt;/select&gt;
&lt;/div&gt;
</code>  
</pre>

<p>El botón de búsqueda SEARCH lanzara el método <strong>search</strong> cada vez que sea clickeado. No tiene ningún misterio al respecto:</p>

<pre>
<code class="language-html">
/* AFTER */
&lt;div class="form-group col-xs-6 col-md-3"&gt;
    &lt;a class="btn btn-block btn-primary"&gt;SEARCH&lt;/a&gt;
&lt;/div&gt;

/* BEFORE with Vue.js */

&lt;div class="form-group col-xs-6 col-md-3"&gt;
    &lt;a class="btn btn-block btn-primary" v-on:click="search"&gt;
        SEARCH
    &lt;/a&gt;
&lt;/div&gt;
</code>  
</pre>

<p>El botón de reproducir/pausar gifs. Por cada click, se ejecutará la funcion <strong>play_gifs</strong> que modificara la variable <strong>play</strong> el icono del mismo según la variable <strong>play</strong>:</p>

<pre>
<code class="language-html">
/* AFTER */
&lt;div class="form-group col-xs-6 col-md-3"&gt;
    &lt;a class="btn btn-block btn-primary"&gt;
        &lt;i class="fa fa-play"&gt;&lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;

/* BEFORE with Vue.js */

&lt;div class="form-group col-xs-6 col-md-3"&gt;
    &lt;a class="btn btn-block btn-primary" v-on:click="play_gifs"&gt;
        &lt;i v-bind:class="{ 'fa fa-pause': play, 'fa fa-play': !play}"&gt;
        &lt;/i&gt;
    &lt;/a&gt;
&lt;/div&gt;
</code>  
</pre>

<p>Finalmente llegamos al grid, que consta de un bucle de <strong>gifs</strong>( variable - lista) que contendrá imágenes con javascript. Por un lado contralaremos la reproducción de los gifs según se posicione el cursor encima de estos con <strong>mouseenter</strong> y <strong>mouseleave</strong>. ¿Os acordáis de la variable <strong>play</strong>? pues es la encargada de cambiar el <strong>src</strong> y alternar entre la imagen y el gif animado:</p>

<pre>
<code class="language-html">
/* BEFORE with Vue.js */
&lt;div class="container grid"&gt;
            &lt;div v-for="gif in gifs" class='col-xs-6 col-sm-6 col-md-3 col-lg-3'&gt;
                &lt;img v-on:mouseenter="entrar(gif)" 
                     v-on:mouseleave="salir(gif)" 
                     :src="play ? gif.images.fixed_height_small.url 
                     : gif.images.fixed_height_small_still.url"&gt;
            &lt;/div&gt;
        &lt;/div&gt;
</code>  
</pre>

<div class="elem">
    
    
    
    <div class="wall_overflow gif">
        <img class="gif" data-src="//media2.giphy.com/media/UFGj6EYw5JhMQ/giphy_s.gif" /></div>
    
    
    
    
    <div class="title-photo">
        <p>Bueno, dejémonos de rodeos y pongámonos a programar de verdad.</p>
    </div>
    
</div>

<p>Ahora pasamos al javascript: html tenía un identificador <strong>giphy</strong> que necesitara <strong>el</strong> para posicionarse, las variables se colocan en <strong>data</strong> y la funciones en <strong>methods</strong>:</p>

<pre>
<code class="language-javascript">
new Vue({
    /* seleccionas el DOM */
    el: '#giphy', 
    /* las variables mencionadas anteriormente. Se ha incluido aux
    para salvaguardar una url cuando hagamos hover sobre un gif */
    data: {
        word: ''
        , gifs: []
        , selected: 32
        , limits: [32, 64, 128]
        , gifs: []
        , play: false
        , aux: ''
    },
    
    /* En cuanto cargamos la web, mostramos gifs */
    ready: function () {
        this.getGifs();
    },
    
    methods: {
    /* toggle que modifica la variable booleana play */
    play_gifs: function () {
        this.play = !this.play;
    }, 
    
    /* Si el cursor pasa por encima de un gif modifica la url */
    entrar: function (gif) {
        this.aux = gif.images.fixed_height_small_still.url;
        gif.images.fixed_height_small_still.url = gif.images.fixed_height_small.url;
    },
    
    /* Si el cursor sale de un gif restaura el gif en pausa */
    salir: function (gif) {
        gif.images.fixed_height_small_still.url = this.aux;
    },
    
    /* funcion de busqueda */
    search: function() {
        this.getGifs();
    },
    
    getGifs: function () {    
        /* Si la palabra no es vacia, buscamos gifs gracias a la variable word y limitado por limit */
        if (this.word != "") 
        {
            this.$http.get("http://api.giphy.com/v1/gifs/search?q=" + this.word + "&amp;api_key=dc6zaTOxFJmzC&amp;limit=" + this.selected.toString()).then((response) =&gt; {
            this.$set('gifs', response.data.data);
            }, (response) =&gt; {});
        }
        else 
        {
            /* En caso contrario, mostramos los gifs que sean trending topic */
            this.$http.get("http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC&amp;limit=" + this.selected.toString()).then((response) =&gt; {
            this.$set('gifs', response.data.data);
            }, (response) =&gt; {});
        }
    }
    }
})
</code>  
</pre>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/puDJSDoaY-w/mqdefault.jpg" id="puDJSDoaY-w" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Ha quedado chulo aunque se podría mejorar.</p>
    </div>
    
</div>

<p>Lamentablemente me he dejado en el tintero el uso de componentes como son la modal o el uso de firebase pero lo actualizare cuando disponga de algo de tiempo. Os dejo una copia del proyecto por si interesa.</p>

<p><a class="btn" href="https://www.dropbox.com/s/rm527w0o64jk5dl/Vuejs%20-%20Tutorial.zip?dl=0" target="_blank">
Resultado Final
</a></p>]]></content><author><name>ivanheral</name></author><category term="tutorial" /><summary type="html"><![CDATA[Bueno chicos, hoy realizaremos un buscador de gifs usando exclusivamente Vue.js, un framework que a diferencia de jQuery nos permite poner javascript en el propio DOM evitándonos selecciones innecesarias. Para hacerlo más interesante he contado con la colaboración de la Api Giphy, bastante popular tras su integración en twitter.]]></summary></entry><entry><title type="html">Tutorial. Grafo social Twitter con Riot y D3</title><link href="ivanheral.github.io/tutorial/2016/07/30/tutorial-grafo-twitter-con-riot-d3.html" rel="alternate" type="text/html" title="Tutorial. Grafo social Twitter con Riot y D3" /><published>2016-07-30T16:00:00+02:00</published><updated>2016-07-30T16:00:00+02:00</updated><id>ivanheral.github.io/tutorial/2016/07/30/tutorial-grafo-twitter-con-riot-d3</id><content type="html" xml:base="ivanheral.github.io/tutorial/2016/07/30/tutorial-grafo-twitter-con-riot-d3.html"><![CDATA[<p>Sin que sirva de precedente, crearemos un generador de grafos interactivo de la red social twitter con la librería gráfica D3 y un framework tan peculiar y desconocido como Riot.</p>

<p>Tendremos un formulario para añadir usuarios de twitter dibujando un bonito grafo de nodos y links. Los nodos representaran a los usuarios y los links representaran la conexiones que tienen entre ellos (follow - follower). Podremos ir agregando uno a uno y ver como nuestro grafo va creciendo de tamaño de forma interactiva.</p>

<div class="elem">
    
    
    
    <div class="wall_overflow gif">
        <img class="gif" data-src="//media2.giphy.com/media/uvqSTLjUe9u2Q/giphy_s.gif" /></div>
    
    
    
    
    <div class="title-photo">
        <p>Este tutorial nos permitirá comprender las relaciones que se producen en el mundo sin movernos de casa</p>
    </div>
    
</div>

<p><strong>1º objetivo:</strong> Obtener la informacion que nos hace falta mediante la API de twitter. Usaremos node.js (express &amp; cors) y <a href="https://www.npmjs.com/package/twitter" target="_blank">twitter</a>. Lo importante ahora mismo es mostrar la estructura de carpetas y ficheros que usaremos para llegar la idea a buen puerto:</p>

<pre>
    <code class="language-files">
Riotjs/ /* Carpeta raiz */
--- app/ /* Carpeta app */
-------- app.js
-------- routes.js
-------- twitter.js
-------- tags/ /* Carpeta tags de Riot.js */
-------------- app.tag
-------------- more_options.tag
-------------- index.js
--- public/ /* Carpeta public */
-------- index.html
--- package.json
--- webpack.config.js
--- server.js
    </code>    
</pre>

<p><strong>package.json:</strong> Aquí tendremos todo lo necesario para que funcione nuestro invento. Usaremos express, cors y twitter para crear los servicios. El resto nos permitirá trabajar con Riot.js y D3: he pensado en <a href="https://github.com/esnunes/riotjs-loader">riotjs-loader</a> &amp; webpack para contruir nuestro bundle:</p>
<pre>
    <code class="language-json">
{
  "name": "riot-webpack",
  "version": "1.0.0",
  "description": "",
  "main": "bundle.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "start": "webpack-dev-server --inline --hot",
    "bundle": "webpack"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "d3": "3.5.17",
    "riot": "~2.6.2",
    "twitter": "^1.4.0"
  },
  "devDependencies": {
    "babel-core": "^6.13.2",
    "babel-loader": "^6.2.4",
    "riotjs-loader": "^3.0.0",
    "superagent": "^2.3.0",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1",
    "cors": "^2.8.1",
    "express": "^4.14.0"
  }
}
    </code>    
</pre>

<p>He decidido usar superagent para conectar correctamente con los servicios por que se adapta bastante bien a Riot. Ok, lanzamos este comando para instalarlo todo:</p>
<pre>
    <code class="language-bash">
npm install
    </code>    
</pre>

<div class="post-title page">Node.js</div>

<p><strong>server.js:</strong> Este fichero se encargara de arrancar nuestros servicios usando express y cors en el puerto 4500. En las carpetas app tendremos el cliente twitter con las keys (os presto las mías) y las rutas:</p>
<pre>
    <code class="language-js">
var express = require("express"),
    app = express(),
    cors = require("cors"),
    client = require('./app/twitter');

var router = express.Router();
app.use(cors());
app.use('/', router);
/* Routes */
require('./app/routes')(router, client);
app.listen(4500);
exports = module.exports = app;
    </code>    
</pre>

<p><strong>app/twitter.js:</strong> Las claves que comente anteriormente para poder acceder a la api de twitter y que almacenaremos en la variable <strong>client</strong>:</p>
<pre>
    <code class="language-js">
var Twitter = require('twitter');

var client = new Twitter({
    consumer_key: '20WaLvRtAfgNaidtVj75bEyQq'
    , consumer_secret: '3hwKEd3Q39OiAPtGKomjOU1u5SL45i6yDic5BfttLPxmhMdrYL'
    , access_token_key: '1072055204-FqweRykJv3h8KAtmG8IE3PSOqnGroEXEasp8eEG'
    , access_token_secret: 'o8VC0TDlclmRAMPUWMFygh2DSaFASh8C0GHYNu6PzkX6O'
});

module.exports = client;
    </code>    
</pre>

<p><strong>app/routes.js:</strong> Aquí estarán las rutas, en nuestro caso solo tendremos dos. Una para obtener la información de perfil de cada usuario que queramos agregar en nuestro grafo y otra para comprobar si están relacionados con los otros usuarios anteriores:</p>

<pre>
    <code class="language-js">
// app/router.js
module.exports = function (router, client) {

/* Aqui iran los dos servicios */

}
    </code>    
</pre>

<p><strong>1º servicio:</strong> Necesitamos informacion del usuario que incluyamos en nuestro grafo. Tendremos que usar <a href="https://dev.twitter.com/rest/reference/get/users/show">users/show</a> de la API twitter para extraer su identificador, su nick/nombre y la url de su avatar/imagen:</p>
<pre>
    <code class="language-js">
    router.route('/user/:name').get(function (req, res) {
    /* Usamos de parametro name (example: localhost:4500/user/ivanheral) */
        var params = {
            screen_name: req.params.name
        };
        client.get('users/show', params, function (error, user) {
            if (!error) {
               console.log({
                    "id": user.id_str,
                    "screen_name": user.screen_name
                    , "name": user.name
                    , "img": user.profile_image_url
                });
            /* Devolvemos un json con el id, nick, nombre y imagen del usuario de twitter */
            res.json({
                    "id": user.id_str,
                    "screen_name": user.screen_name
                    , "name": user.name
                    , "img": user.profile_image_url
                });
            }
        });
    });
        </code>    
</pre>

<p><strong>2º servicio:</strong> Necesitamos comprobar si dos usuarios de twitter se siguen mutuamente. Bastara con usar <a href="https://dev.twitter.com/rest/reference/get/friendships/show">users/show</a> de la API twitter para comprobar si podemos conectar ambos usuarios con un link:</p>
<pre>
    <code class="language-js">
    router.route('/links/:user_1/:user_2/:x/:y').get(function (req, res) {
        /* Usamos los nombres user_1 y user_2 en params */
        var params = {
            source_screen_name : req.params.user_1
            , target_screen_name: req.params.user_2
        };
        client.get('friendships/show', params, function (error, tweets, response) {
            if (!error) {
                /* Condicion que comprueba si se siguen mutuamente */
                if (tweets.relationship.target.following &amp;&amp; tweets.relationship.target.followed_by) {
                    /* Exito! Devuelvo true y la posicion que tienen en nuestro acumulado particular */
                    res.json({"relation": true, "pos_x":req.params.x, "pos_y":req.params.y});
                } else res.json({"relation": false});
            }
        });
    });
        </code>    
</pre>

<p>Ok, con esto bastaria para tener montado nuestro particular servidor. Ya solo tendriamos que lanzarlo con un <strong>node server</strong> y probar en nuestro navegador escribiendo esta url: <strong>localhost:4500/user/perezreverte</strong> para ver si funciona correctamente.</p>

<div class="post-title page">Webpack</div>

<p><strong>webpack.config.js:</strong> Este es el fichero webpack con la configuración pertinente. El comando <strong>npm run bundle</strong> construira nuestro bundle.js mientras que <strong>npm run start</strong> nos permitirá lanzarlo en caliente mientras modificamos el proyecto:</p>
<pre>
    <code class="language-js">
var webpack = require('webpack');
/* compilamos el fichero app/app.js en public/bundle.js */
module.exports = {
    context: __dirname + '/app'
    , entry: './app.js'
    , output: {
        path: __dirname + '/public'
        , filename: 'bundle.js'
    }
    /* importante incluir riot, d3 y superagent en nuestro bundle */
    , plugins: [
    new webpack.ProvidePlugin({
            riot: 'riot', d3: 'd3'
            , request: 'superagent'
        })
  ]
    , module: {
        preLoaders: [
            {
                test: /\.tag$/, exclude: /node_modules/
                , loader: 'riotjs-loader'
      }
    ]
    }
    /* servidor */
    , devServer: {
        contentBase: './public'
    }
};
        </code>    
</pre>

<p><strong>public/index.html:</strong> la estructura es muy sencilla con estilos bootstrap. Lo único a destacar es la etiqueta <strong>app</strong> que sera indispensable para montar los componentes de Riot:</p>
<pre>
    <code class="language-html">
&lt;!DOCTYPE html&gt;
&lt;html lang=""&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta name="description" content=""&gt;
    &lt;meta name="author" content=""&gt;
    &lt;title&gt;Social Graph Twitter&lt;/title&gt;
    &lt;link rel="shortcut icon" href=""&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;app&gt;&lt;/app&gt;
    &lt;script src="bundle.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;    
</code>
</pre>

<p><strong>app/app.js:</strong> La columna vertebral del proyecto donde incluimos riot, superagent y los tags. Finalmente montamos el 1º componente <strong>social-twitter</strong> en la etiqueta <strong>app</strong> de <strong>public/index.html</strong></p>

<pre>
    <code class="language-js">
var riot = require('riot');
var request = require('superagent');
require('./tags');

riot.mount('app','social-twitter')
        </code>    
</pre>

<p><strong>tags/index.js:</strong>Capitan Obvius al rescate!, fichero que no necesita mucha explicación al respecto, simplemente incluyo todos los tags que se encuentran en la carpeta del mismo nombre para que <strong>app.js</strong> los incluya con un simple <strong>require(‘./tags’)</strong>:</p>
<pre>
    <code class="language-js">
require('./more_options.tag')
require('./app.tag')
        </code>    
</pre>

<p><strong>tags/app.tag:</strong> Esto es lo que vendría a ser nuestro primer componente de Riot mencionado anteriormente como <strong>social-twitter</strong>. Por una parte tenemos los estilos propios (css) junto al html (un formulario con una función <strong>add</strong>) y finalmente el javascript (ES6) que ira al final del todo. En el siguiente paso iré incluyendo lo necesario para que funcione:</p>
<pre>
    <code class="language-html">
&lt;social-twitter&gt;
&lt;style&gt;
.options {background: #ddd;}
form {padding: 5px 5px;}
&lt;/style&gt;
&lt;div class='container options'&gt;
&lt;form class='form-inline'&gt;
  &lt;div class='form-group'&gt;
    &lt;input name='user' class='form-control'&gt;
  &lt;button type='submit' class='btn btn-primary' onclick={add}&gt;ADD USER TWITTER&lt;/button&gt;
  &lt;/div&gt;
  &lt;options nodes_list={nodes} links_list={links}&gt;&lt;/options&gt;
&lt;/form&gt;
&lt;/div&gt;

/* codigo javascript que explicare por pasos a continuación */

&lt;/social-twitter&gt;
        </code>    
</pre>

<div class="post-title page">D3</div>

<p>Ok, comenzamos con javascript. Definimos el ancho y alto que tendrá nuestro componente svg para visualizar nuestro grafo (1800/820px en nuestro caso). Ahora mismo esta calibrado para monitores FullHD pero podéis modificar <strong>public/style.css</strong> para adecuarlo a vuestro monitor:</p>
<pre>
    <code class="language-js">
let self = this
let width = 1800
, height = 820
        </code>    
</pre>

<p>Incluimos las dimensiones a nuestra etiqueta <strong>app</strong> para que tenga constancia de sus dimensiones:</p>
<pre>
    <code class="language-js">
self.svg = d3.select('app')
.append('div')
.attr('class','container graph')
.append('svg').attr('width', width)
.attr('height', height)
        </code>    
</pre>

<p>Aplicamos force layout a nuestro d3 indicándole algunas propiedades como pueden ser la gravedad hacia el centro o la distancia entre nodos:</p>
<pre>
    <code class="language-js">
self.force = d3.layout.force().
gravity(0.1).distance(100).
charge(-100).size([width, height])
        </code>    
</pre>

<p>¿Como interpreta force layout &amp; d3 la información? pues… os pongo un ejemplo. Alex de la Iglesia y Nacho vigalondo se siguen mutuamente en twitter. Por lo tanto, la variable <strong>links</strong> contendra un link con source y target apuntando a 0 y 1 que son las posiciones de la lista de nodos que tendremos en la variable <strong>nodes</strong>:</p>
<pre>
    <code class="language-json">
{
    "nodes": [{
        "id": "5793642"
        , "name": "Nacho Vigalondo"
        , "img": "http://pbs.twimg.com/profile_images/782341301551325184/pTkWiFy2_normal.jpg"
        , "screen_name": "vigalondo"
        , "index": 0
    }, {
        "id": "43310939"
        , "name": "De la Iglesia"
        , "img": "http://pbs.twimg.com/profile_images/752006649255198720/-3MXvi1k_normal.jpg"
        , "screen_name": "alexdelaIglesia"
        , "index": 1
    }]
    , "links": [{
        "source": 0
        , "target": 1
    }]
}
    </code>    
</pre>

<p>Teniendo en cuenta lo anterior, pasamos a crear una lista de nodos y links para acumular los usuarios y relaciones que obtengamos tras escribirlos en el formulario:</p>
<pre>
    <code class="language-js">
self.nodes = []
self.links = []
        </code>    
</pre>

<p>Incluimos dos funciones que aplicaremos a los nodos para poder fijarlos en el area como si fueran chinchetas. Con doble click volveran a su posicion original:</p>
<pre>
    <code class="language-js">
this.dblclick = function(d) {
  d3.select(this).classed('fixed', d.fixed = false);
}

this.dragstart = function(d) {
  d3.select(this).classed('fixed', d.fixed = true);
}
</code>
</pre>

<p>Aplicamos force a los nodos y links. Editamos los nodos para que se muestren con la imagen y nombre del usuario correspondiente. A los links se les aplicara los estilos de la clase link y los nodos dispondran las funciones anteriormente mencionadas:</p>
<pre>
    <code class="language-js">
self.force.nodes(self.nodes).links(self.links)
self.link = self.svg.selectAll('.link').data(self.links).enter().append('line').attr('class', 'link')
self.node = self.svg.selectAll('.node').data(self.nodes).enter().append('g').attr('class', 'node').call(self.force.drag).on('dragstart', this.dragstart).on('dblclick', this.dblclick)

self.node.append('image').attr('xlink:href', function (d) {
                return d.img
            }).attr('x', -12).attr('y', -12).attr('width', 24).attr('height', 24).append('text').attr('x', 0).attr('dy', '26px').attr('text-anchor', 'middle').text(function (d) {
        return d.name})   
        </code>
</pre>

<p>Mediante tick conseguiremos que nuestros nodos cobren vida y se muevan libremente:</p>
<pre>
    <code class="language-js">
self.force.on('tick', function () {
        self.link.attr('x1', function (d) {
            return d.source.x;
        }).attr('y1', function (d) {
            return d.source.y;
        }).attr('x2', function (d) {
            return d.target.x;
        }).attr('y2', function (d) {
            return d.target.y;
        });
        self.node.attr('transform', function (d) {
            return 'translate(' + d.x + ',' + d.y + ')'
        });
})
</code>
</pre>

<p>Esta función se encargara de refrescar los nodos &amp; links cada vez que añadamos un nuevo usuario. Les aplicara todas las propiedades necesarias para que funcionen del mismo modo que el resto:</p>
<pre>
    <code class="language-js">
self.start=function(e) {
    self.link = self.link.data(self.force.links())
    self.node = self.node.data(self.force.nodes())
    self.link.enter().insert('line', '.node').attr('class', 'link')
    var aux = self.node.enter().insert('g').attr('class', 'node')
    aux.append('image').attr('xlink:href', function (d) {
            return d.img
        }).attr('x', -12).attr('y', -12).attr('width', 24).attr('height', 24)
    aux.append('text').attr('x', 0).attr('dy', '26px').attr('text-anchor', 'middle').text(function (d) {
        return d.name
    })
    self.link.exit().remove()
    self.node.exit().remove()
    self.node.call(self.force.drag).on('dragstart', this.dragstart).on('dblclick', this.dblclick)
    self.force.nodes(self.nodes).links(self.links).start()    
}
</code>
</pre>

<p>Finalmente terminamos con la logica del componente <strong>social-twitter</strong>, concretamente la funcion add que se ejecuta al pulsar el boton <strong>ADD USER TWITTER</strong>:</p>
<pre>
    <code class="language-js">
self.add=function(e) {
/* Obtenemos el nick del usuario de twitter */
self.add_aux(self.user.value)
}    
    
self.add_aux=function(name) {
/* usamos superagent y tiramos del servicio */
request.get( 'http://localhost:4500/user/'+name, function(err,res) {
    
    /* Lo guardamos todo en la variable new_node */
    var new_node = {
        id: res.body.id,
        name: res.body.name,
        img: res.body.img,
        screen_name: res.body.screen_name
    }

    /* Agregamos el nodo en nodes */
    self.nodes.push(new_node)
    
    /* En cuanto agregamos el 1º nodo... refrescamos! */
    if (self.nodes.length==1) {self.start()}
    /* Vaya... tenemos que actualizar nuestras variables nodes y links */
    self.update()
    
    /* Comprobamos si el nuevo nodo tiene relaciones con los que
    estaban anteriormente agregados */
    for(i=0; i&lt;self.nodes.length-1; i++) {
        let size = self.nodes.length-1
        request.get( 'http://localhost:4500/links/'+self.nodes[i].screen_name+'/'+self.nodes[self.nodes.length-1].screen_name+'/'+i+'/'+size, 
        function(err,res) {
        /* Si hay relacion, agregamos link */
        if (res.body!=null &amp;&amp; res.body.relation) {
                self.links.push({
                    source: parseInt(res.body.pos_x)
                    , target: parseInt(res.body.pos_y)
                }) 
                /* Relacion encontrada! toca refrescar */
                self.start()
            }
        })
    }
})
/* clear */
self.user.value = ''
}
</code>
</pre>
<p>Y aqui termina el tutorial por mi parte, solo teneis que lanzar desde la carpeta Riotjs un <strong>node server</strong> y abrir <strong>Public/index.html</strong> para cacharrear un poco (se me olvido que teneis que lanzar un <strong>npm run bundle</strong> para que funcione correctamente). Quedaría explicar el 2º componente de nombre <strong>more_options</strong>, componente hijo de <strong>social-twitter</strong> y responsable del guardado, carga y reseteo de nuestras creaciones. Es mejor descargarse el codigo que dejo al final del post como siempre digo.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/Ita5o7g3RkQ/mqdefault.jpg" id="Ita5o7g3RkQ" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Ejemplo de la versión final con opción para guardar, cargar y resetear grafos</p>
    </div>
    
</div>

<p><strong>Advertencias:</strong> Es importante recalcar que las peticiones a la API Twitter son limitadas. Recomiendo salvar vuestras creaciones cada 15-20 usuarios para no perder el progreso. Otra recomendacion es que os hagais usuario de twitter para solicitar unas keys y access tokens en <a href="https://apps.twitter.com/">https://apps.twitter.com/</a>. Ahora mismo os presto mis permisos pero probablemente acabe petando si mucha gente le da por usarlo.</p>

<p><a class="btn" href="https://www.dropbox.com/s/esyc3jln6yo8hd0/Riotjs.zip?dl=0" target="_blank">
Codigo del Tutorial
</a></p>]]></content><author><name>ivanheral</name></author><category term="tutorial" /><summary type="html"><![CDATA[Sin que sirva de precedente, crearemos un generador de grafos interactivo de la red social twitter con la librería gráfica D3 y un framework tan peculiar y desconocido como Riot.]]></summary></entry><entry><title type="html">Tutorial. Todo App con Ember y Mongo</title><link href="ivanheral.github.io/tutorial/2016/06/10/app-ember-mongo.html" rel="alternate" type="text/html" title="Tutorial. Todo App con Ember y Mongo" /><published>2016-06-10T16:00:00+02:00</published><updated>2016-06-10T16:00:00+02:00</updated><id>ivanheral.github.io/tutorial/2016/06/10/app-ember-mongo</id><content type="html" xml:base="ivanheral.github.io/tutorial/2016/06/10/app-ember-mongo.html"><![CDATA[<p>Hoy he decidido revivir una serie de posts publicados a mediados de abril del años pasado (<a href="http://ryanchristiani.com/working-with-ember-data-node-express-and-mongodb/">1</a>,<a href="programwitherik.com/how-to-setup-your-ember-project-with-mongo-and-node/">2</a>,<a href="programwitherik.com/how-to-add-records-with-mongo-and-ember/">3</a>,<a href="programwitherik.com/how-to-edit-or-delete-with-mongo-and-ember/">4</a>). Fueron unos 4 posts escritos por <a href="www.twitter.com/RChristiani">Ryan Christiani</a> y <a href="www.twitter.com/ErikCH">Erik Hanchett</a> muy interesanter sobre como utiliar Mongo con el framework Ember 1.X. Lamentablemente dejaron de funcionar tras el lanzamiento de la version 2.0 del framework Ember dejando inservibles los post mencionados. Hoy reviviremos estos post y aprenderemos a realizar una especie de Todo-App que nos permita listar, añadir, modicar y borrar notas en Mongo usando este simpatico pero en ocasiones cambiante framework.</p>

<div class="post-title page">1º Parte: La Api</div>

<p>Ok. Primero contruiremos una api que haga peticiones de la base de datos. Es importante instalar mongo y nodejs con un simple <strong>sudo apt-get install nodejs &amp;&amp; mongo</strong>, recomiendo instalar Robomongo 0.8.5 para visualizar los registros. Lo siguiente sera crear una carpeta de nombre Tutorial-Ember (por ejemplo) y dentro creamos una de nombre Api que tendra la siguiente estructura de archivos y carpetas. A continuacion, enumeramos la estructura de ficheros que tendra:</p>

<pre>
    <code class="language-bash">
carpeta api
   - note.js
   
carpeta app
   - routes.js 
      
carpeta models      
   - note.js 
    
package.json
server.json    
    </code>    
</pre>

<p><strong>package.json:</strong> Usaremos express y moongose principalmente. Morgan para visualizar en la terminal si funcionan correctamente las peticiones todo correctamente. Cors y body-parser para otras cosas, no quiero profundizar al respecto XD:</p>

<pre>
<code class="language-json">
{
  "name": "Server",
  "version": "0.0.0",
  "devDependencies": {
    "body-parser": "^1.15.2",
    "cors": "^2.7.1",
    "express": "^4.14.0",
    "mongoose": "^4.5.2",
    "morgan": "^1.7.0"
  }
}
</code>    
</pre>

<p><strong>models/note.js:</strong> Vamos a crear un registro de notas/cuentos donde almacenaremos 3 campos: el titulo, el contenido y el autor en formato string:</p>
<pre>
<code class="language-js">
// models/note.js
mongoose = require('mongoose');
/* Usaremos un modelo 'note' con tres campos strings */
var noteSchema = new mongoose.Schema({
	title: 'string',
	content: 'string',
	author: 'string'
});

module.exports = mongoose.model('note',noteSchema);
</code>    
</pre>

<p><strong>app/routes.js:</strong> Aqui tendremos configuradas las 2 rutas bien diferenciadas. En api/notes tenemos un GET que recupere todas las notas y POST para agregar una nota. En /api/notes/:note_id tendremos las opciones de modificar y borrar mediante DELETE y PATCH:</p>
<pre>
<code class="language-js">
// app/router.js

var notes = require('../api/note');
module.exports = function (router) {

    /* Ruta de listado de nota (get) y salvado de nuevas notas (post) */ 
    router.route('/api/notes').get(function (req, res) {
            notes.getAllNotes(req, res)
        })
        .post(function (req, res) {
            notes.addNote(req, res)
        });
        
    /* Ruta de borrado (delete) y modificado (patch) */     
    router.route('/api/notes/:note_id').get(function (req, res) {
            notes.getIdNote(req, res)
        })
        .delete(function (req, res) {
            notes.deleteNote(req, res)
        })
        .patch(function (req, res) {
            notes.saveNote(req, res)
        });
};
</code>    
</pre>

<p><strong>api/note.js:</strong> Aqui estan las 4 funcionalidades que enlazan a la ruta correspondiente. <strong>getAllNotes</strong> devuetve un listado de todas las notas en la variable note. <strong>getIdNote</strong> busca la nota por el identificador que recibe como parametro de la ruta. <strong>deleteNote</strong> borra en funcion del identificador recibido y <strong>addNote</strong> añade una nota:</p>
<pre>
<code class="language-js">
var Note = require('../models/note');

/* Enviara la lista de notas en una variable 'note' */
module.exports.getAllNotes = function (req, res) {
    Note.find({}, function (err, docs) {
        if (err) res.send(err)
        console.log(docs);
        res.send({
            note: docs
        });
    });
};

/* Buscara la nota gracias a req.params.note_id y nos devolvera
la nota en una variable 'note' */
module.exports.getIdNote = function (req, res) {
    Note.findById(req.params.note_id, function (err, docs) {
        if (err) res.send(err);
        console.log(docs);
        res.send({
            note: docs
        });
    });
};

/* Eliminado de nota */
module.exports.deleteNote = function (req, res) {
    Note.findById(req.params.note_id, function (err, elem) {
        if (err) res.send(err);
        elem.remove(function (err, docs) {
            if (err) res.send(err);
            console.log(docs);
            res.send({
                note: docs
            });
        });
    });
};

/* Salvar nota */
module.exports.addNote = function (req, res) {
    var note = new Note(req.body.note);
    note.save(function (err, elem) {
        if (err) res.send(err);
        console.log(elem);
        res.send({
            note: elem
        });
    });
};

/* Modificar nota ($set: req.body.note) */
module.exports.saveNote = function (req, res) {
    Note.findByIdAndUpdate(req.params.note_id, {
        $set: req.body.note
    }, function (err, elem) {
        if (err) res.send(err);
        console.log(elem);
        res.send({
            note: elem
        });
    });
};
</code>    
</pre>

<p><strong>server.js:</strong> Finalmente terminamos con el servidor. El servidor se ejecutara por el puerto 4500. La cosa quedaria como muestro a continuacion:</p>

<pre>
<code class="language-js">
/* Variables */
var express = require("express")
    , app = express();

var morgan = require('morgan');
var bodyParser = require('body-parser');
var cors = require('cors');
var router = express.Router();


/* Conectamos a la BBDD  de Mongo */
mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/emberData');


app.use(morgan('dev'));
app.use(bodyParser.json());

app.use(cors());


/* USAR RUTAS */
app.use('/', router);
require('./app/routes')(router);

/* Puerto */
app.listen(4500);
console.log("Node server running on http://localhost:4500");

exports = module.exports = app;
</code>    
</pre>

<p>Bueno, ahora toca probar nuestra API. Abrimos una terminal en la carpeta Api y ejecutamos <strong>npm install</strong>. Despues lanzamos <strong>node server</strong> y dejamos que funcione en el puerto 4500. Solo nos queda probar si funciona ejecutando los siguientes comandos en otra terminal estando siempre pendiente de los mensajes que puedan salir en la terminal con el mensaje <strong>Node server running on http://localhost:4500</strong>:</p>
<pre>
<code class="language-bash">
// ADD note
curl -d '{"note":{"title":"Oliver Twist","content":"Oliver es un niño huérfano.","author": "Charles Dickens"}}' -H "Content-Type: application/json" http://localhost:4500/api/notes

// GET ALL
curl http://localhost:4500/api/notes

// DELETE note
curl -X DELETE -H "Content-Type: application/json" http://localhost:4500/api/notes/(_id reemplazar por el identificador correcto)

/* Si aparecen 200/204 de color verde es que la cosa va bien
Morgan y los mensajes de la terminal te guiaran. */
</code>    
</pre>

<div class="post-title page">2º Parte: El framework</div>

<p>¿Ha funcionado correctamente? si la respuesta es afirmativa entonces pasaremos a la segunda parte. EmberJs es un framework bastante interesante que mediante comandos por terminal nos permitira generar plantillas, rutas y controladores de manera sencilla y rapida. Pero lo primero es instalarlo:</p>
<pre>
<code class="language-bash">
// Instalamos Ember (este tutorial utiliza la version 2.6.2)
sudo npm install -g ember-cli@2.6.2
// En la carpeta Tutorial-Ember abrimos una terminal y lanzamos un nuevo proyecto:
ember new Example
</code>    
</pre>

<p>Estupendo, metamonos dentro de la carpeta Example y abramos una terminal. En el siguiente paso se describen los comandos que nos ahorraran escribir:</p>

<pre>
<code class="language-bash">
// 1º Creamos la ruta MADRE
// g (generate -  generar) &amp; d (deploy - remover)
ember g route application

// 2º Creamos la ruta index y about (Aqui agregaremos y listaremos notas)
ember g route index
ember g route about

// 3º Creamos la ruta note/show (Aqui modificaremos y borraremos notas)
ember g route note/show

// 4º Generamos el modelo note (title,content.author)
ember g model note title:string content:string author:string

// 5º Generamos el serializer para que conecte con el id de Mongo.
ember g serializer application

// 6º Generamos el adaptador para que nuestro proyecto Ember apunte a la Api.
ember g adapter application

// 7º Generamos los controladores donde incluiremos las acciones
ember g controller index
ember g controller note/show

// 8º Instalar Bootstrap 4 (addon)
bower install tether
ember install ember-cli-sass
ember install ember-bootstrap-4
</code>    
</pre>

<p>Ha sido relativamente sencillo pero ahora queda lo realmente dificil, rellenar los ficheros generados, nos centraremos en la carpeta app que se aloja en <strong>Example</strong>. <strong>app/styles/app.scss: </strong>Necesitamos agregar bootstrap en la hoja de estilos del proyecto y renombar a *.scss el fichero de estilos:</p>
<pre>
<code class="language-scss">
@import "bootstrap";

/* ejemplo de estilo propio */

.padding-top {
    padding-top: 2rem;
}
</code>    
</pre>

<p><strong>Example/app/adapters/application.js:</strong> Fichero para conectar la api con nuestro framework. Le asignamos un nombre, un host para que apunte al puerto de nuestra api y incluimos unos headers para la correcta lectura del json tras las peticiones que hagamos:</p>
<pre>
<code class="language-js">
import JSONAPIAdapter from 'ember-data/adapters/json-api';

export default JSONAPIAdapter.extend({
    namespace: 'api',
    host: 'http://localhost:4500',
    headers: {"Content-Type":"application/json"}
});
</code>    
</pre>

<p><strong>app/router.js:</strong> Aqui se configuran las rutas. Index apuntara a la url “/” y about apuntara a “/about”:</p>
<pre>
<code class="language-js">
import Ember from 'ember';
import config from './config/environment';

const Router = Ember.Router.extend({
  location: config.locationType
});

Router.map(function() {
  this.route('about', {path: "/about"});
  this.route('index', {path: "/"});
  /* En la carpeta note se encuentra el template show que recibira un parametro id */
  this.resource('note', function() {
      this.route('show', {
          path: ":note_id"
      });
    });
});

export default Router;
</code>    
</pre>

<p><strong>app/serializers/application.js:</strong> Este fichero sera modificado debido a que la libreria <strong>RESTSerializer</strong> funciona correctamente para asignar una clave primaria a los _id de los registros que se extraen de Mongo:</p>
<pre>
<code class="language-js">
import DS from 'ember-data';

export default DS.RESTSerializer.extend({
	primaryKey: '_id'
});
</code>    
</pre>

<p><strong>app/templates/routes/index.js:</strong> Devuelve una variable model con todas las notas registradas en Mongo.</p>
<pre>
<code class="language-js">
import Ember from 'ember';

export default Ember.Route.extend({
	model: function() {
		return this.store.findAll('note');
	}
});
</code>    
</pre>

<p><strong>app/templates/application.hbs:</strong> Esta es la ruta Madre de donde tiraran el resto de vistas. Aqui se ha incluido exclusivamente la cabecera y en outlet se dibujara la vista que se considere oportuno en funcion de la url en la que estemos:</p>
<pre>
<code class="language-html">
&lt;nav class="navbar navbar-dark navbar-full bg-primary"&gt;
  &lt;button class="navbar-toggler hidden-sm-up" type="button" data-toggle="collapse" data-target="#exCollapsingNavbar2"&gt;
    &#9776;
  &lt;/button&gt;
  &lt;div class="collapse navbar-toggleable-xs" id="exCollapsingNavbar2"&gt;
    &lt;a class="navbar-brand" href="#"&gt;Todo App - Ember&lt;/a&gt;
    &lt;ul class="nav navbar-nav"&gt;
      &lt;li class="nav-item active"&gt;
        {{#link-to 'about' class="nav-link"}}ABOUT{{/link-to}}
      &lt;/li&gt;      
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/nav&gt;
{{outlet}}
</code>  
</pre>

<p><strong>app/templates/index.hbs:</strong> Primer template de nuestra App. Constara de un formulario que tras un submit lanzara la accion save del controlador index. Lo siguiente que vereis es el listado mediante un each que devuelve un item para visualizar las notas:</p>
<pre>
<code class="language-html">
&lt;div class="container"&gt;
    &lt;div class="row"&gt;    
        &lt;div class="col-xs-12 col-md-3 padding-top"&gt;
            &lt;form {{action 'save' on="submit" }}&gt;
                &lt;div class="form-group"&gt;
                    &lt;label&gt;Titulo:&lt;/label&gt;{{textarea value=titulo class="form-control"}} &lt;/div&gt;
                &lt;div class="form-group"&gt;
                    &lt;label&gt;Contenido:&lt;/label&gt;{{textarea rows=10 value=contenido class="form-control"}} &lt;/div&gt;
                &lt;div class="form-group"&gt;
                    &lt;label&gt;Autor:&lt;/label&gt;{{textarea value=autor class="form-control"}} &lt;/div&gt;
                &lt;button class="btn btn-primary"&gt;añadir&lt;/button&gt;
            &lt;/form&gt;
        &lt;/div&gt;        
        &lt;div class="col-xs-12 col-md-9 padding-top"&gt;
            &lt;div class="row"&gt;               
               {{#each model as |item|}}
               
                &lt;div class="col-xs-12 col-sm-6 col-md-4"&gt;
                    &lt;div class="card text-xs-right"&gt;                           
                        &lt;img class="img-fluid card-img-top" src="assets/images/ember.jpg"&gt;
                            &lt;div class="card-block"&gt;
                                &lt;h4 class="card-title"&gt;{{item.title}}&lt;/h4&gt; 
                                &lt;p&gt;{{item.content}}&lt;/p&gt;
                                &lt;p&gt;{{item.author}}&lt;/p&gt;
                                {{#link-to 'note.show' item.id class="btn btn-primary" tagName="button" }}
                                ver
                                {{/link-to}}
                            &lt;/div&gt;                            
                    &lt;/div&gt;
                &lt;/div&gt;                 
                {{/each}} 
            &lt;/div&gt;          
        &lt;/div&gt;        
    &lt;/div&gt;
&lt;/div&gt;
</code>  
</pre>

<p><strong>app/controllers/index.js:</strong>El controlador de index dispone de la accion <strong>save</strong> que hemos visto anteriormente en el formulario. Gracias a <strong>createRecord</strong> podemos salvar una nota extrayendo el valor de los textareas. Reseteamos el formulario y guardamos:</p>
<pre>
<code class="language-js">
import Ember from 'ember';

export default Ember.Controller.extend({

actions: {
        save: function () {
            var note = this.store.createRecord('note', {
                title: this.get('titulo'),
                content: this.get('contenido'),
                author: this.get('autor')
            });	    
	        this.set('titulo', "");
            this.set('contenido', "");
            this.set('autor', "");
            note.save();
        }
    }
});
</code>    
</pre>

<p><strong>app/templates/note/show.hbs:</strong> Esta vista es un formulario que dibuja los campos de la nota escogida con tres posibles acciones mediante botones (borrar, modificar y Index):</p>
<pre>
<code class="language-html">
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;div class="col-xs-12 col-sm-6 padding-top"&gt;
            &lt;form&gt;
                &lt;div class="form-group"&gt;
                    &lt;label&gt;Titulo:&lt;/label&gt;
                    {{textarea value=model.title cols="40" rows="1" class="form-control"}}
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                    &lt;label&gt;Contenido:&lt;/label&gt;
                    {{textarea value=model.content cols="40" rows="10" class="form-control"}}
                &lt;/div&gt;
                &lt;div class="form-group"&gt;
                    &lt;label&gt;Autor:&lt;/label&gt;
                    {{textarea value=model.author cols="40" rows="1" class="form-control"}}
                &lt;/div&gt;
                &lt;div class="btn-group"&gt;
                    &lt;button type="delete" class="btn btn-danger" {{action 'delete' on='click' }}&gt;borrar&lt;/button&gt;
                    &lt;button type="submit" class="btn btn-success" {{action 'update' on='click' }}&gt;modificar&lt;/button&gt;
                    {{#link-to 'index' tagName="button" class="btn btn-primary"}}Index{{/link-to}}
                &lt;/div&gt;
            &lt;/form&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code>    
</pre>

<p><strong>Example/app/controllers/note/show.js:</strong> Este controlador tiene dos acciones (borrado y modificado). Tras realizar su cometido, nos reenviaran a la home mediante <strong>transitionToRoute(‘index’)</strong>.</p>
<pre>
<code class="language-js">
import Ember from 'ember';
export default Ember.Controller.extend({
    actions: {
        delete: function () {
            /* Borrado */
            this.get('model').deleteRecord();
            this.get('model').save();
            this.transitionToRoute('index');
        },
        update: function () {
            /* Seleccionamos la nota */
            var note_selected = this.get('model');
            /* Reescribimos */
            note_selected.save();
            this.transitionToRoute('index');
        }
    }
});
</code>    
</pre>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/4p8_aYyKtx8/mqdefault.jpg" id="4p8_aYyKtx8" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Video del resultado final</p>
    </div>
    
</div>

<p><strong>Conclusiones del paso de Ember 1.x a 2.x:</strong> En Ember 2.x usan PATCH y no PUT para modificaciones, muy raro. Muchas librerias han sido reemplazadas sin repercutir en el funcionamiento exceptuando serializer. Incluir los headers en el adaptador es mas sencillo que modificar el environment. Ha sido un poco desesperante pero finalmente ha funcionado mejor de lo que esperaba. Dejo el codigo por si le interesa a alguien:</p>

<p><a class="btn" href="http://www.dropbox.com/s/ntrmv8j1226rbhz/Tutorial-Ember.zip?dl=0" target="_blank">
Codigo del Tutorial
</a></p>]]></content><author><name>ivanheral</name></author><category term="tutorial" /><summary type="html"><![CDATA[Hoy he decidido revivir una serie de posts publicados a mediados de abril del años pasado (1,2,3,4). Fueron unos 4 posts escritos por Ryan Christiani y Erik Hanchett muy interesanter sobre como utiliar Mongo con el framework Ember 1.X. Lamentablemente dejaron de funcionar tras el lanzamiento de la version 2.0 del framework Ember dejando inservibles los post mencionados. Hoy reviviremos estos post y aprenderemos a realizar una especie de Todo-App que nos permita listar, añadir, modicar y borrar notas en Mongo usando este simpatico pero en ocasiones cambiante framework.]]></summary></entry><entry><title type="html">Analisis personal del anime Golden Boy</title><link href="ivanheral.github.io/random/2016/05/30/review-golden-boy.html" rel="alternate" type="text/html" title="Analisis personal del anime Golden Boy" /><published>2016-05-30T16:00:00+02:00</published><updated>2016-05-30T16:00:00+02:00</updated><id>ivanheral.github.io/random/2016/05/30/review-golden-boy</id><content type="html" xml:base="ivanheral.github.io/random/2016/05/30/review-golden-boy.html"><![CDATA[<p>Últimamente no sé muy bien de qué escribir, pero me he decidido compartir con vosotros un anime que me marco bastante a principios de este sigo XXI. En esos años no disponía de internet, pero recuerdo una pequeña mención a este trabajo a través del programa Desesperado Club Social de Antena 3.  Normalmente al final del programa realizaban algunas recomendaciones a nivel cultural y una de ellas fue precisamente fue Golden Boy, un pequeño anime de tan solo 6 capítulos sobre un joven japonés que recorría el país de trabajo en trabajo. En la actualidad cuento con una versión física de la serie, pero en esos tiempos era material bastante difícil de encontrar por lo que no tuve más remedio que tirar de la piratería junto a mi modem de 256k para descargármela.</p>

<p>Pero vayamos al principio de esta historia, concretamente al año 1992. Tatsuya Egawa por aquel entonces ideo en su cabeza el personaje de nombre Kintaro y empezó a publicar sus desventuras en la revista Super Jump gracias al interés de la editora Shueisha. Eran pequeños relatos sobre un veinteañero y su peculiar relación con las mujeres. Se ve que a la revista le gusto el 1º tomo y no tardó mucho en encargarle hasta 10 volúmenes al bueno de Tatsuya originando una estrecha colaboración que duraría medio lustro. Pero la cosa no quedo ahí, lo mejor llegaría cuando la propia editora Shueisha tuvo la brillante idea de hacer un escueto anime con el primer volumen junto a la inestimable ayuda del estudio de animación A.P.P.P..</p>

<div class="post-title page">Lección 1: Lecciones de informática</div>

<p>Primer capítulo o lo que viene a ser el capítulo piloto para evitarnos malos entendidos. Nuestro protagonista va montado en su impecable bicicleta con los auriculares a toda pastilla cuando tiene un accidente con un cochazo del que desciende una imponente mujer de nombre Madame President por la que perderá completamente la cabeza. En este caso, los caminos del Señor son inescrutables y vuelven a coincidir, pero en el ámbito laboral: ella lidera un departamento tecnológico de programadoras mientras él se encarga de tareas más mundanas como pasar el trapo y limpiar los pasillos. En el aspecto meramente artístico se puede percatar que tira entre el realismo de trazo grueso pasando a lo aniñado para recrear algunas expresiones faciales muy sui generis (muy chicho terremoto). Mi momento: Kintaro aprendiendo a programar en plan vagabundo con un teclado dibujado en un papel arrugado.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/ITzOiIuyB5o/mqdefault.jpg" id="ITzOiIuyB5o" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Lección 1: Lecciones de informática</p>
    </div>
    
</div>

<p>Posiblemente este capítulo me gano por completo por su delicada forma de ponerme en antecedentes. En pocos planos ya te ponía en situación de cómo era Kintaro, un pasota de la vida que igual se recreaba con las tazas de wáter donde recaían las posaderas de las féminas como se envalentonaba cual gallo para de vez en cuando sacar a relucir su buen corazón, un viva la vida de campeonato.  Su vida no hace más que dar vaivenes como una veleta y acaba como técnico de limpieza en una empresa imperada por mujeres, algo anecdótico teniendo en cuenta lo que se destila en el mundo real. Precisamente en ese aspecto era donde recalaba todo el peso de la trama: la minusvaloración de la mujer en el ámbito laboral, el sexismo que impera en él y lo importante que es no llevarse por las primeras apariencias.</p>

<div class="post-title page">Lección 2: El ángel de seducción</div>

<p>Segundo capítulo, el más picante de la serie. Si os fijáis nunca se profundiza mucho en la vida de Kintaro, solo sabemos que tiene 25 años y que dejo la universidad para ir deambulando de trabajo en trabajo como bien hace en incidir durante toda la serie. Así que con esa premisa nos topamos con que el jovenzuelo acabo ayudando a un candidato político fuertemente vinculado a los yakuza y de paso, conocer a su hija Naoko Katsuda impartiéndola clases particulares. En esta ocasión, la carne es débil y el pobre de Kintaro caerá rendido con los encantos de dicha joven hasta el punto de jugarse el tipo ante la reprobación de su estricto padre. Mi momento: la transformación en pene de la mano de kintaro tras ser agarrada por la joven, una imagen alegórica de lo que viene a ser el folla-amigo de toda la vida.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/LdidRi4Yiu8/mqdefault.jpg" id="LdidRi4Yiu8" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Lección 2: El ángel de seducción</p>
    </div>
    
</div>

<p>Como ya habréis podido ver, la estructura argumental es impertérrita en toda la serie: Kintaro encuentra  un trabajo, conoce chica y va anotando en su pequeño diario todas aquellas experiencias que le aporten algo como persona. En esta ocasión, los flirteos en los que se ve envuelto acabaran por enseñarle lo importante que es saber cuándo una persona te está utilizando única y exclusivamente para su propio beneficio. Es más que evidente que este capítulo es el que más respeta la obra de Tatsuya en su vertiente erotica pero con pequeños matices en cuanto a la forma de narrar los hechos y las fantasías sexuales que Kintaro elucubra en su pequeña cabecita.</p>

<div class="post-title page">Lección 3: Cuando aparece el primer amor</div>

<p>Ok, pasamos a un capítulo más comedido. Aquí nuestro intrépido joven acaba de cocinitas en un negocio familiar, se ve que el muchacho es bastante versátil y no tarda mucho en congeniar con los dueños y su preciosa hija Noriko. El problema llega cuando aparece Hiroshi Kogure, un joven adinerado de oscuras intenciones que embaucara a la joven con tal de hacerse con el restaurante de sus padres. Una vez más, se repite la historia anterior, pero teniendo a un hombre como persona toxica y al bueno de Kintaro como mero espectador de la relación que mantienen Hiroshi y Noriko. Un trio amoroso que no tardará mucho en tener sus desavenencias. Mi momento: la escena de despedida con crisantemos de por medio.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/3Mh2aOp7UWI/mqdefault.jpg" id="3Mh2aOp7UWI" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Lección 3: Cuando aparece el primer amor</p>
    </div>
    
</div>

<p>En el transcurso del capítulo, comenzamos a vislumbrar la figura del padre protector en el personaje de Kintaro pasando a un papel secundario en la historia.  Por lo visto, Hiroshi Kogure quiere casarse con Naruko con tal de hacerse con el restaurante de esta, lógicamente Kintaro materializa las sospechas que tenía acerca de este chico y no tarda en jugarse el pellejo poniendo su amistad con Y en serio peligro para interceder en esta relación toxica que mantienen. No tardan en surgir las primeras desavenencias  llevándole a un cumulo de circunstancias de las que saldrá mal parado. El capítulo más adulto de la serie si se me permite decirlo, 25 minutos de culebrón bien llevados y sin apenas fisuras de ningún tipo.</p>

<div class="post-title page">Lección 4: Nadando en aguas salvajes</div>

<p>Sin comerlo ni beberlo hemos acabado llegando al ecuador de la serie y nuestro buen amigo Kintaro continúa aprendiendo como bien insiste con su “aprendo, aprendo…” que repite como una moviola el pobre. Esta vez no está trabajando pero un encuentro casual con una nadadora olímpica le lleva a apuntarse como instructor de natación con tal de conocerla. Una tarde cualquiera y fruto de su desmesurado ego acaba por retarla a un duelo nadando cuya contrincante acepta de buen grado. Técnicamente el capítulo más sobresaliente por parte de Ayuko dejando entrever que A.P.P.P. tenía unos planes mejores para el personaje que explicare más adelante. Mi momento: la primera prueba a la que se ve sometido de la que acaba exhausto y descomponiéndose por momentos.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/9tCYbSdWmVo/mqdefault.jpg" id="9tCYbSdWmVo" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Lección 4: Nadando en aguas salvajes</p>
    </div>
    
</div>

<p>Lo que se suponía que iba a ser un reto de natación acaba derivando en un inteligente debate sobre que método de aprendizaje es más correcto para los niños. Si los ejercicios estrictos de la “dominatrix” Ayuko o por el contrario apostar por aprender jugando como lleva a cabo Kintaro. Un acierto de lo importante que es no someter a excesivas presiones a críos que, en sus primeros años de vida, tan solo quieren jugar y pasárselo bien. Justo en el ecuador de la serie veo un salto cualitativo y un meticuloso trabajo por la fotografía, es como si quisieran llevar el anime a otro nivel como así quedo demostrado en el capítulo final.</p>

<div class="post-title page">Lección 5: Juventud sin freno</div>

<p>El capítulo más flojo del anime. Igual es que la formula no daba para más, pero estamos ante una historia floja repetitiva y carente de cualquier atisbo de moralina. En esta ocasión, Kintaro trabaja en la casa de un multimillonario aprendiendo labores domésticas hasta que un buen día sus ojos recalan en Reiko Tarayama, una adolescente obsesionada con las motos de gran cilindrada. Las cosas no le van relativamente bien ya que finalmente es despedido al poco tiempo de empezar y acaba acampando a la fueras. Una ocasión que ni pintada para ver la mal llevada vida de nómada que lleva Kintaro. Acurrucado frente a su tienda de campaña y pequeño hornillo para comer caliente espera impaciente a Reiko hasta que finalmente se produce el encuentro. Mi momento: El salto al vacío que está a punto de realizar Kintaro junto su bici antes de despeñarse por un desfiladero.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/LDjBfO3Ixxc/mqdefault.jpg" id="LDjBfO3Ixxc" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Lección 5: Juventud sin freno</p>
    </div>
    
</div>

<p>Sería una pérdida de tiempo escribir acerca de este capítulo ya que no es más que una mezcla de la fogosidad que se destilaba en el capítulo 2 con un reto muy parecido al del capitulo 4 con la bicicleta de Kintaro y la motocicleta de Reiko como principales contrincantes. Algo muy simplista para lo que estábamos acostumbrados en anteriores capítulos, pero como estamos ante una serie de escaso recorrido se les podía perdonar. No es más que un órdago sin estructura argumental clara que lo sostenga, de corto recorrido y fácilmente olvidable.</p>

<div class="post-title page">Lección 6 – La animación es fantástica.</div>

<p>Mucha gente se pregunta porque no se continuó con el anime tras este capítulo final y la respuesta es muy sencilla: NO había más material. El autor Tatsuya Egawa se marcó un brindis al sol y no había que detenerse mucho en la lectura del resto de tomos para darse cuenta que el siguiente era a cada cual peor que el anterior. A cada página que leáis, el personaje iba mutando en algo antagónico a lo que se esperaba y prácticamente sin comerlo ni beberlo el manga se había convertido en un hentai de dudoso gusto y pésimo trabajo artístico.  A.P.P.P. tenía constancia de esto y se propusieron dignificar al personaje. No se limitaron a ceñirse a la historia original, sino que mejoraron al personaje engrandeciendo su relato y llevándolo a su propio terreno.</p>

<p>Y ahí radica un poco el encanto que tengo por este anime, el estudio vio un potencial en el 1º tomo y decidieron apostar por el sin paliativos con ciertos matices. Para empezar, descartaron el capítulo 2 del manga por romper con la sintonía del tomo (en ese capítulo, Kintaro consumaba su relación). Tras la criba, comenzaron a limpiar el resto de impurezas, edulcoraron al personaje y lo arrebataron de las temibles garras de su autor original que en esta ocasión solo supervisaría el trabajo de Hiroyuki Kitakubo y Yasuhito Kikuchi, directores del anime.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/Lw5MZta408Q/mqdefault.jpg" id="Lw5MZta408Q" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Lección 6 – La animación es fantástica.</p>
    </div>
    
</div>

<p>Por este motivo el capítulo anime no existe en el manga, simplemente rellenaron ese vacío con un capítulo de cosecha propia para ofrecernos un desenlace inconcluso, pero altamente satisfactorio. Los chicos de A.P.P.P. se marcaron un auto-homenaje a su sacrificada profesión de dibujante introduciendo al personaje al que tantas horas le habían dedicado en un estudio de animación ficticio. Un acierto y locura a partes iguales donde tenía cabida hasta el mismísimo padre de la criatura (Tatsuya Egawa) en forma de personaje auto-paródico involucrando a su propia creación (Kintaro Oe) en el proceso de animar una serie.</p>

<p>Lamentablemente los plazos de entrega se ven reducidos y comienza a decaer los ánimos en el estudio hasta que Kintaro se envalentona y contacta con todas aquellas chicas a través de su agenda de contactos con tal de cumplir la fecha de entrega. Una historia preciosa sobre la pasión por el trabajo y sobre el significado de la vida. Al final todo se resume en pedalear: unos días te vendrá de cara y no tendrás que hacer esfuerzo alguno mientras que otros días tendrás que hacer frente a cuestas empinadas. Eso sí, el camino te encontraras con gente que te aportara algo en la vida para al final darte cuenta que lo importante es el recorrido y no la meta.</p>]]></content><author><name>ivanheral</name></author><category term="random" /><summary type="html"><![CDATA[Últimamente no sé muy bien de qué escribir, pero me he decidido compartir con vosotros un anime que me marco bastante a principios de este sigo XXI. En esos años no disponía de internet, pero recuerdo una pequeña mención a este trabajo a través del programa Desesperado Club Social de Antena 3. Normalmente al final del programa realizaban algunas recomendaciones a nivel cultural y una de ellas fue precisamente fue Golden Boy, un pequeño anime de tan solo 6 capítulos sobre un joven japonés que recorría el país de trabajo en trabajo. En la actualidad cuento con una versión física de la serie, pero en esos tiempos era material bastante difícil de encontrar por lo que no tuve más remedio que tirar de la piratería junto a mi modem de 256k para descargármela.]]></summary></entry><entry><title type="html">Mi experiencia como colchonero</title><link href="ivanheral.github.io/opinion/2016/05/21/mi-experiencia-atleti.html" rel="alternate" type="text/html" title="Mi experiencia como colchonero" /><published>2016-05-21T16:00:00+02:00</published><updated>2016-05-21T16:00:00+02:00</updated><id>ivanheral.github.io/opinion/2016/05/21/mi-experiencia-atleti</id><content type="html" xml:base="ivanheral.github.io/opinion/2016/05/21/mi-experiencia-atleti.html"><![CDATA[<p>Antes que nada, tengo que reconocer que no era muy aficionado al futbol además de que mis primeros flirteos me llevaron sorprendentemente a simpatizar más con el Real Madrid. Incluso recuerdo que llegue a celebrar con cierto ímpetu el gol de Zidane para acudir al Bernabéu para celebrar con los primos la copa de Europa conseguida por el equipo vikingo. ¿Qué paso en mi cabeza para pasar de merengón a eterno vikingo? Pues a fecha de hoy no sabría cómo explicarlo, pero me atrevo a decir sin titubear que el descenso del Atleti fue uno de los primeros detonantes para mi reconversión a colchonero confeso.</p>

<p>En esos dos años en 2º división comencé a visitar el Calderón de forma esporádica gracias a la invitación mediante abonos de amigos y familiares, un primer contacto fruto de la curiosidad. Tampoco es que me motivara en exceso, pero en esos tiernos inicios comencé apreciar otra forma de disfrutar de los partidos de futbol. Lo que me llamo poderosísima la atención desde un primer momento fue su afición, siempre volcada con el equipo desde el minuto 1 y que no perdía el fuelle frente las adversidades. En cambio, el público del Bernabéu siempre me parecía más acomodado como más autocomplaciente fruto de una extensa vitrina llena de trofeos aplaudiendo a un equipo creado a base de talonario lleno de individualidades.</p>

<p>Tras el ansiado ascenso en 2002 y con la inminente celebración del centenario del club, no tuve más remedio que hacerme socio y más viendo lo asequible que era en esos momentos (250 euros). Hay que recordar que eran momentos muy convulsos, enrique cerezo reemplazo a la familia gil y el entrenador Luis aragonés acabo abandonando el club de mala manera, aunque el tiempo le tendría preparado algo mejor sabiamente conocidos por todos. Mucha gente se dio de baja y el equipo solo contaba con Femando torres y Diego Simeone como máximos exponentes pero yo decidí  apostar por ellos y ver si algún día volverían a recuperar el lugar que les correspondía.</p>

<p>Tengo que decir que las dos primeras temporadas fueron horribles, tenían un promedio goleador bastante ridículo y el único espectáculo que veíamos en el campo venia proveniente del Mono Burgos con alguna de sus monerías debajo los tres palos. En la temporada 2005/2006 se ficho a Maxi Rodríguez que junto a Amaranto Perea animaron un poco las gradas con sus eslálones por las bandas laterales. Lo que se marmullaba entre el público era cierto hartazgo contra cerezo y la falta de resultados se hacía evidente en cada partido lanzando improperios contra los directivos que manejaban el club a su antojo, en defensa éramos un coladero y la sombra del “pupas” volvía hacer acto de presencia.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/uDyK8wY4Xn8/mqdefault.jpg" id="uDyK8wY4Xn8" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Los partidos eran muy Oliver y Benji. Meterla entre los tres palos se convertia en un autentico suplicio</p>
    </div>
    
</div>

<p>Finalmente mejoramos considerablemente, volvimos a jugar en Champions tras 11 años desaparecidos en combate y empezamos a recuperar ese trono que nos fue arrebatado como 3º equipo de España. Recuerdo con cierto sabor agridulce mi última temporada como socio del Atleti (2009-2010), Quique Sánchez Flores echo toda la carne en el asador en la UEFA y Copa del Rey mientras que la Liga la dejo en un segundo plano acabando en un lamentable 9º puesto. Perdimos cualquier opción de jugar cualquier competición europea de cara al año que viene, pero me lleve el poder disfrutar la final de Copa del Rey ante el Sevilla de aciago resultado. Lo sé, perdimos tras 24 horas sin dormir afinados en el autobús desde Madrid hasta el Camp Nou pero la gente seguía con sus canticos tras perder, un gesto más que loable y que dejaba bien a las claras de que los atléticos estábamos hechos de otra pasta.</p>

<p>Pero como en toda buena historia que se precie, esta tenía que finalizar y decidí darme de baja de mi butaca en el 2º anfiteatro lateral. Desde la directiva sabían perfectamente que el equipo estaba nuevamente entre los grandes de Europa y no se lo pensaron dos veces en subir el precio de los abonos de manera ostensible hasta llegar a triplicar su precio desde que me hice socio. Son cosas que nunca debemos olvidar, el deporte futbolístico es un negocio y como tal tiene que salir a la palestra cuando los resultados acompañaban. Por la módica cuantía de 50 euros conservé la antigüedad (n.º 15.000 – 20.000) y recibí una invitación cada temporada para acudir a cualquier partido (exceptuando Barcelona y Real Madrid), es lo que hay, pero menos da una piedra.</p>

<div class="elem">
    
    <div class="wall_overflow">
        <img data-src="http://img.youtube.com/vi/KE_n03kEPAM/mqdefault.jpg" id="KE_n03kEPAM" />
    </div>
    
    
    
    
    
    
    <div class="title-photo">
        <p>Cerezo promociono peliculas en la camisetas y Fernando Torres no queria ser menos...</p>
    </div>
    
</div>

<p>Anda que no he tenido constantemente la tenue sensación de ser gafe tras darme de baja. Fue no volver a pisar el Vicente Calderón y empezaron a llover los títulos de forma consecutiva. 2 Supercopas de Europa, 1 Campeonato de Liga, 1 Copa del Rey, 1 UEFA Europa League y 1 Súper Copa de España atestiguan mi teoría. Pero bueno, tampoco quiero ser agorero en ese sentido y retribuirme lo que no es. En esos años posteriores desconecte por completo: ya no estaba pendiente de la radio cada jornada de liga, fui olvidando el nombre de los jugadores de la plantilla incluso alguna vez no aproveche la invitación como socio no-abonado. Pero siempre era de los primeros en acudir a Neptuno cada vez que levantábamos un título junto con amigos y familiares o escuchando algunos partidos con la oreja bien pegada al transistor.</p>

<p>Son innumerables los recuerdos que afloran en mi cabeza durante esa etapa: las no-victorias contra el Real Madrid, los bocadillos durante los descansos o los canticos del frente atlético contra nuestros eternos rivales o jugadores nuestros que no daban la talla. Una pena que las nuevas normativas impuestas en los estadios y los horarios kafkianos instaurados por las cadenas televisivas hayan acabado por enturbiar lo que fue en su día un espectáculo en directo, pero como ya dije anteriormente, todo se reduce a mero negocio y especulación. No sabéis como me cabrea el mercadeo que se está produciendo estos días en los aledaños del Calderón con la compra-venta de entradas para la final de San Siro, eso no es afición ni es nada.</p>

<div class="elem">
    
    
    
    
    
    <div class="wall_overflow gif"><img data-src="/files/images/blog/simeone-fernando-torres.jpg" /></div>
    
    
    <div class="title-photo">
        <p>Me alegra ver que aunque pasen los años, la gente siga comprometida con el equipo que les vio crecer</p>
    </div>
    
</div>

<p>El próximo 28 de mayo volvemos a tener una oportunidad que no debemos aprovechar, aunque tampoco es que me quite mucho el sueño. Me acuerdo cuando viví en primera persona la despedida de Simeone en 2004 en el Vicente Calderón: saco a sus críos y con un estruendo aplauso del público allí congregado realizo el paseíllo por el borde del campo para finalmente. ¿Quién nos habría dicho a nosotros que 12 años después acabarían reencontrándose estos dos jugadores para disputar una final de Champions con el Real Madrid?, supongo que son esas carambolas del destino que te hacen recordar en cierto modo de porqué ser Atleti es algo más que un sentimiento.</p>]]></content><author><name>ivanheral</name></author><category term="opinion" /><summary type="html"><![CDATA[Antes que nada, tengo que reconocer que no era muy aficionado al futbol además de que mis primeros flirteos me llevaron sorprendentemente a simpatizar más con el Real Madrid. Incluso recuerdo que llegue a celebrar con cierto ímpetu el gol de Zidane para acudir al Bernabéu para celebrar con los primos la copa de Europa conseguida por el equipo vikingo. ¿Qué paso en mi cabeza para pasar de merengón a eterno vikingo? Pues a fecha de hoy no sabría cómo explicarlo, pero me atrevo a decir sin titubear que el descenso del Atleti fue uno de los primeros detonantes para mi reconversión a colchonero confeso.]]></summary></entry></feed>